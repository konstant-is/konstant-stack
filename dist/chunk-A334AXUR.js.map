{"version":3,"sources":["../src/utils/object.ts"],"sourcesContent":["// @ts-nocheck\n\n// Define a utility type to extract the keys from a union type\ntype ExtractKeys<T> = T extends string ? T : never;\n\n/**\n * Get nested property of an object\n * @param obj\n * @param path\n * @returns {*}\n */\nexport const getNestedProperty = (obj: any, path: string) => {\n  return path\n    .split(\".\")\n    .reduce(\n      (acc, key) => (acc && acc[key] !== undefined ? acc[key] : undefined),\n      obj,\n    );\n};\n\n/**\n * Simple object check.\n * @param item\n * @returns {boolean}\n */\nexport function isObject(item: unknown): boolean {\n  return item && typeof item === \"object\" && !Array.isArray(item);\n}\n\n/**\n * Deep merge two objects.\n * @param target\n * @param ...sources\n */\n\nexport function deepMerge<T, R>(target: T, source: R): T {\n  const output = { ...target };\n  if (isObject(target) && isObject(source)) {\n    Object.keys(source).forEach((key) => {\n      if (isObject(source[key])) {\n        if (!(key in target)) {\n          Object.assign(output, { [key]: source[key] });\n        } else {\n          output[key] = deepMerge(target[key], source[key]);\n        }\n      } else {\n        Object.assign(output, { [key]: source[key] });\n      }\n    });\n  }\n\n  return output;\n}\n\n// Create a generic function to create the record and options based on the type\nexport const createObjectKeys = <T extends string>(keys: ExtractKeys<T>[]) => {\n  const values = keys.reduce(\n    (acc, key) => {\n      acc[key] = key;\n      return acc;\n    },\n    {} as Record<ExtractKeys<T>, string>,\n  );\n\n  return values;\n};\n"],"mappings":";AAWO,IAAM,oBAAoB,CAAC,KAAU,SAAiB;AAC3D,SAAO,KACJ,MAAM,GAAG,EACT;AAAA,IACC,CAAC,KAAK,QAAS,OAAO,IAAI,GAAG,MAAM,SAAY,IAAI,GAAG,IAAI;AAAA,IAC1D;AAAA,EACF;AACJ;AAOO,SAAS,SAAS,MAAwB;AAC/C,SAAO,QAAQ,OAAO,SAAS,YAAY,CAAC,MAAM,QAAQ,IAAI;AAChE;AAQO,SAAS,UAAgB,QAAW,QAAc;AACvD,QAAM,SAAS,EAAE,GAAG,OAAO;AAC3B,MAAI,SAAS,MAAM,KAAK,SAAS,MAAM,GAAG;AACxC,WAAO,KAAK,MAAM,EAAE,QAAQ,CAAC,QAAQ;AACnC,UAAI,SAAS,OAAO,GAAG,CAAC,GAAG;AACzB,YAAI,EAAE,OAAO,SAAS;AACpB,iBAAO,OAAO,QAAQ,EAAE,CAAC,GAAG,GAAG,OAAO,GAAG,EAAE,CAAC;AAAA,QAC9C,OAAO;AACL,iBAAO,GAAG,IAAI,UAAU,OAAO,GAAG,GAAG,OAAO,GAAG,CAAC;AAAA,QAClD;AAAA,MACF,OAAO;AACL,eAAO,OAAO,QAAQ,EAAE,CAAC,GAAG,GAAG,OAAO,GAAG,EAAE,CAAC;AAAA,MAC9C;AAAA,IACF,CAAC;AAAA,EACH;AAEA,SAAO;AACT;AAGO,IAAM,mBAAmB,CAAmB,SAA2B;AAC5E,QAAM,SAAS,KAAK;AAAA,IAClB,CAAC,KAAK,QAAQ;AACZ,UAAI,GAAG,IAAI;AACX,aAAO;AAAA,IACT;AAAA,IACA,CAAC;AAAA,EACH;AAEA,SAAO;AACT;","names":[]}