{"version":3,"sources":["../src/payload/utils/getLocale.ts","../src/payload/utils/getPayloadContext.ts"],"sourcesContent":["import type { Locale, SanitizedConfig } from \"payload\";\n\ntype LocaleCode = Locale[\"code\"];\n\n/**\n * Checks if a given string is a valid locale.\n * @param locale The locale string to validate.\n * @returns True if the locale is valid, otherwise false.\n */\nconst isLocale = <T extends SanitizedConfig>(\n  locale: null | string | undefined,\n  localeCodes: string[]\n): locale is SupportedLocale<T> => {\n  return !!locale && localeCodes.includes(locale as SupportedLocale<T>);\n};\n\ntype SupportedLocale<T extends SanitizedConfig> = T[\"localization\"] extends {\n  locales: infer L;\n}\n  ? L extends string[]\n    ? L[number]\n    : never\n  : never;\n\n/**\n * Validates and returns the locale.\n * @param config The Payload config object.\n * @param locale The locale string to validate.\n * @returns The validated locale.\n */\nexport const getLocale = <T extends SanitizedConfig>(\n  config: T,\n  locale: null | string | undefined\n): SupportedLocale<T> => {\n  const { localization } = config;\n  if (!localization) {\n    throw new Error(`Localization is not supported by Payload`);\n  }\n  const { defaultLocale, localeCodes } = localization;\n\n  if (isLocale<T>(locale, localeCodes)) {\n    return locale;\n  }\n\n  return defaultLocale as SupportedLocale<T>;\n};\n","import type { SanitizedConfig } from \"payload\";\n\nimport { draftMode } from \"next/headers.js\";\nimport { getPayload } from \"payload\";\n\nimport type { PayloadQuery } from \"../types.js\";\n\nimport { getLocale } from \"./getLocale.js\";\n\nexport const getPayloadContext = async <T extends SanitizedConfig>(\n  config: Promise<T> | T,\n  params: PayloadQuery\n) => {\n  const { isEnabled: draft } = await draftMode();\n  const payload = await getPayload({ config });\n  const processedLocale = getLocale(payload.config, params.locale);\n  const query = {\n    draft,\n    locale: processedLocale,\n    overrideAccess: draft,\n  };\n  return { draft, locale: processedLocale, payload, query };\n};\n"],"mappings":";AASA,IAAM,WAAW,CACf,QACA,gBACiC;AACjC,SAAO,CAAC,CAAC,UAAU,YAAY,SAAS,MAA4B;AACtE;AAgBO,IAAM,YAAY,CACvB,QACA,WACuB;AACvB,QAAM,EAAE,aAAa,IAAI;AACzB,MAAI,CAAC,cAAc;AACjB,UAAM,IAAI,MAAM,0CAA0C;AAAA,EAC5D;AACA,QAAM,EAAE,eAAe,YAAY,IAAI;AAEvC,MAAI,SAAY,QAAQ,WAAW,GAAG;AACpC,WAAO;AAAA,EACT;AAEA,SAAO;AACT;;;AC3CA,SAAS,iBAAiB;AAC1B,SAAS,kBAAkB;AAMpB,IAAM,oBAAoB,OAC/B,QACA,WACG;AACH,QAAM,EAAE,WAAW,MAAM,IAAI,MAAM,UAAU;AAC7C,QAAM,UAAU,MAAM,WAAW,EAAE,OAAO,CAAC;AAC3C,QAAM,kBAAkB,UAAU,QAAQ,QAAQ,OAAO,MAAM;AAC/D,QAAM,QAAQ;AAAA,IACZ;AAAA,IACA,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AACA,SAAO,EAAE,OAAO,QAAQ,iBAAiB,SAAS,MAAM;AAC1D;","names":[]}