{"version":3,"sources":["../src/utils/canUseDom.ts","../src/utils/createFieldOptions.ts","../src/utils/getReference.ts"],"sourcesContent":["export const canUseDom = () =>\n  !!(\n    typeof window !== \"undefined\" &&\n    window.document &&\n    window.document.createElement\n  );\n","import { capitalize } from \"./string\";\n\n// Define a utility type to extract the keys from a union type\ntype ExtractKeys<T> = T extends string ? T : never;\n\n// Create a generic function to create the record and options based on the type\nexport const createFieldOptions = <T extends string>(\n  keys: ExtractKeys<T>[],\n) => {\n  const values = keys.reduce(\n    (acc, key) => {\n      acc[key] = key;\n      return acc;\n    },\n    {} as Record<ExtractKeys<T>, string>,\n  );\n\n  const options = keys.map((key) => ({\n    label: capitalize(key),\n    value: key,\n  }));\n\n  return { values, options };\n};\n","export function getReference<T>(ref: T | string | null | undefined) {\n  if (typeof ref === \"string\") {\n    return null;\n  }\n\n  return ref as T;\n}\n"],"mappings":";;;;;AAAO,IAAM,YAAY,MACvB,CAAC,EACC,OAAO,WAAW,eAClB,OAAO,YACP,OAAO,SAAS;;;ACEb,IAAM,qBAAqB,CAChC,SACG;AACH,QAAM,SAAS,KAAK;AAAA,IAClB,CAAC,KAAK,QAAQ;AACZ,UAAI,GAAG,IAAI;AACX,aAAO;AAAA,IACT;AAAA,IACA,CAAC;AAAA,EACH;AAEA,QAAM,UAAU,KAAK,IAAI,CAAC,SAAS;AAAA,IACjC,OAAO,WAAW,GAAG;AAAA,IACrB,OAAO;AAAA,EACT,EAAE;AAEF,SAAO,EAAE,QAAQ,QAAQ;AAC3B;;;ACvBO,SAAS,aAAgB,KAAoC;AAClE,MAAI,OAAO,QAAQ,UAAU;AAC3B,WAAO;AAAA,EACT;AAEA,SAAO;AACT;","names":[]}