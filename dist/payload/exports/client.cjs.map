{"version":3,"sources":["../../../src/payload/exports/client.ts","../../../src/utils/canUseDOM.ts","../../../src/utils/createQueryString.ts","../../../src/utils/deepMerge.ts","../../../src/utils/isReactComponent.ts","../../../src/utils/getNestedProperty.ts","../../../src/utils/parseSearchParams.ts","../../../src/utils/stringFormat.ts","../../../src/payload/components/ArrayRowLabel.tsx"],"sourcesContent":["'use client'\n\nexport * from '../components/ArrayRowLabel.js'\n","export const canUseDOM = !!(\n  typeof window !== 'undefined' &&\n  window.document &&\n  window.document.createElement\n)\n","import * as qs from 'qs-esm'\n\nexport const createQueryString = (query: any): string => {\n  return qs.stringify(query, { addQueryPrefix: true })\n}\n","import deepMerge from 'deepmerge'\n\nimport { isPlainObject } from './isPlainObject.js'\n\nexport { deepMerge }\n/**\n * Fully-featured deepMerge.\n *\n * Array handling: Arrays in the target object are combined with the source object's arrays.\n */\nexport function deepMergeWithCombinedArrays<T extends object>(\n  obj1: object,\n  obj2: object,\n  options: deepMerge.Options = {},\n): T {\n  return deepMerge<T>(obj1, obj2, {\n    arrayMerge: (target, source, options) => {\n      const destination = target.slice()\n\n      source.forEach((item, index) => {\n        if (typeof destination[index] === 'undefined') {\n          destination[index] = options?.cloneUnlessOtherwiseSpecified(item, options)\n        } else if (options?.isMergeableObject(item)) {\n          destination[index] = deepMerge(target[index], item, options)\n        } else if (target.indexOf(item) === -1) {\n          destination.push(item)\n        }\n      })\n      return destination\n    },\n    ...options,\n  })\n}\n\n/**\n * Fully-featured deepMerge.\n *\n * Array handling: Arrays in the target object are replaced by the source object's arrays.\n */\nexport function deepMergeWithSourceArrays<T extends object>(obj1: object, obj2: object): T {\n  return deepMerge<T>(obj1, obj2, { arrayMerge: (_, source) => source })\n}\n\n/**\n * Fully-featured deepMerge. Does not clone React components by default.\n */\nexport function deepMergeWithReactComponents<T extends object>(obj1: object, obj2: object): T {\n  return deepMerge<T>(obj1, obj2, {\n    isMergeableObject: isPlainObject,\n  })\n}\n","import type React from 'react'\n\nconst clientRefSymbol = Symbol.for('react.client.reference')\n\nexport function isReactServerComponentOrFunction<T extends any>(\n  component: any | React.ComponentType,\n): component is T {\n  if (component === null || component === undefined) {\n    return false\n  }\n  const hasClientComponentSymbol = component.$$typeof == clientRefSymbol\n\n  const isFunctionalComponent = typeof component === 'function'\n  // Anonymous functions are Client Components in Turbopack. RSCs should have a name\n  const isAnonymousFunction = typeof component === 'function' && component.name === ''\n\n  const isRSC = isFunctionalComponent && !isAnonymousFunction && !hasClientComponentSymbol\n\n  return isRSC\n}\n\nexport function isReactClientComponent<T extends any>(\n  component: any | React.ComponentType,\n): component is T {\n  if (component === null || component === undefined) {\n    return false\n  }\n  return !isReactServerComponentOrFunction(component) && component.$$typeof == clientRefSymbol\n}\n\nexport function isReactComponentOrFunction<T extends any>(\n  component: any | React.ComponentType,\n): component is T {\n  return isReactServerComponentOrFunction(component) || isReactClientComponent(component)\n}\n","// @ts-nocheck\n\n/**\n * Get a deeply nested property of an object based on a dot-separated path.\n * @param obj - The object to traverse.\n * @param path - Dot-separated string representing the path to the property.\n * @returns The value at the specified path or undefined if the path does not exist.\n */\nexport const getNestedProperty = (obj: Record<string, unknown>, path: string): any => {\n  return path\n    .split('.') // Split the path into individual keys\n    .reduce(\n      (acc, key) => (acc && typeof acc === 'object' && key in acc ? acc[key] : undefined),\n      obj,\n    ) // Traverse the object based on the keys\n}\n","import type { ReadonlyURLSearchParams } from 'next/navigation.js'\n\nimport * as qs from 'qs-esm'\n\n/**\n * A utility function to parse URLSearchParams into a ParsedQs object.\n * This function is a wrapper around the `qs` library.\n * In Next.js, the `useSearchParams()` hook from `next/navigation` returns a `URLSearchParams` object.\n * This function can be used to parse that object into a more usable format.\n * @param {ReadonlyURLSearchParams} searchParams - The URLSearchParams object to parse.\n * @returns {qs.ParsedQs} - The parsed query string object.\n */\nexport function parseSearchParams(searchParams: ReadonlyURLSearchParams): qs.ParsedQs {\n  const search = searchParams.toString()\n\n  return qs.parse(search, {\n    depth: 10,\n    ignoreQueryPrefix: true,\n  })\n}\n","import * as s from \"slugify\";\n\n/**\n * Truncates a string to the specified length and adds an ellipsis.\n * @param str\n * @param length\n * @returns\n */\nexport const truncate = (str: string = \"\", length: number = 100): string => {\n  if (str.length <= length) return str;\n  return str.slice(0, length) + \"...\";\n};\n\n/**\n * Checks if a string contains another string (case-insensitive).\n * @param str\n * @param search\n * @returns\n */\nexport const contains = (str: string = \"\", search: string): boolean => {\n  return str.toLowerCase().includes(search.toLowerCase());\n};\n\n// Fallback for CommonJS or ESM default export\nexport const slugify = s.default || s;\n\n/**\n * Capitalizes the first letter\n * @param str\n * @returns\n */\nexport const toCapitalized = (str: string = \"\"): string => {\n  if (!str.length) {\n    return \"\";\n  }\n\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\nexport const toKebabCase = (string: string): string =>\n  string\n    .replace(/([a-z])([A-Z])/g, \"$1-$2\")\n    .replace(/\\s+/g, \"-\")\n    .toLowerCase();\n\n/**\n * Transforms a camelCase or PascalCase string into a readable label.\n * E.g., \"camelCase\" → \"Camel Case\", \"PascalCase\" → \"Pascal Case\".\n */\nexport const toReadable = (str: string): string => {\n  return str\n    .replace(/([a-z])([A-Z])/g, \"$1 $2\") // Add space between lowercase and uppercase\n    .replace(/([A-Z])([A-Z][a-z])/g, \"$1 $2\") // Handle consecutive uppercase letters\n    .replace(/_/g, \" \") // Replace underscores with spaces\n    .replace(/\\b\\w/g, (char) => char.toUpperCase()); // Capitalize the first letter of each word\n};\n","\"use client\";\n\nimport { getNestedProperty } from \"@/utils/index.js\";\nimport { useRowLabel } from \"@payloadcms/ui\";\n\ntype Props = {\n  fallback?: string;\n  fieldName: string;\n  prefix?: string;\n};\nexport const ArrayRowLabel = (props: Props) => {\n  const { label } = useArrayRowLabel(props);\n\n  return <div>{label}</div>;\n};\n\nconst useArrayRowLabel = (props: Props) => {\n  const { fallback, fieldName, prefix } = props;\n  const { data, rowNumber } = useRowLabel<{\n    [key: string]: any; // Allow indexing with a string key\n  }>();\n\n  const rowNr = `${(rowNumber || 0) + 1}`;\n\n  const getLabel = () => {\n    const field = getNestedProperty(data, fieldName);\n\n    return field || fallback || \"New row\";\n  };\n\n  const getFullLabel = () => {\n    const label = getLabel();\n    return `${prefix || \"\"} ${rowNr}: ${label}`;\n  };\n  return {\n    label: getFullLabel(),\n    rowNr: `${(rowNumber || 0) + 1}`,\n  };\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAO,IAAM,YAAY,CAAC,EACxB,OAAO,WAAW,eAClB,OAAO,YACP,OAAO,SAAS;;;ACHlB,SAAoB;;;ACApB,uBAAsB;;;ACEtB,IAAM,kBAAkB,OAAO,IAAI,wBAAwB;;;ACMpD,IAAM,oBAAoB,CAAC,KAA8B,SAAsB;AACpF,SAAO,KACJ,MAAM,GAAG,EACT;AAAA,IACC,CAAC,KAAK,QAAS,OAAO,OAAO,QAAQ,YAAY,OAAO,MAAM,IAAI,GAAG,IAAI;AAAA,IACzE;AAAA,EACF;AACJ;;;ACbA,IAAAA,MAAoB;;;ACFpB,QAAmB;;;ACGnB,gBAA4B;AAUnB;AAHF,IAAM,gBAAgB,CAAC,UAAiB;AAC7C,QAAM,EAAE,MAAM,IAAI,iBAAiB,KAAK;AAExC,SAAO,4CAAC,SAAK,iBAAM;AACrB;AAEA,IAAM,mBAAmB,CAAC,UAAiB;AACzC,QAAM,EAAE,UAAU,WAAW,OAAO,IAAI;AACxC,QAAM,EAAE,MAAM,UAAU,QAAI,uBAEzB;AAEH,QAAM,QAAQ,IAAI,aAAa,KAAK,CAAC;AAErC,QAAM,WAAW,MAAM;AACrB,UAAM,QAAQ,kBAAkB,MAAM,SAAS;AAE/C,WAAO,SAAS,YAAY;AAAA,EAC9B;AAEA,QAAM,eAAe,MAAM;AACzB,UAAM,QAAQ,SAAS;AACvB,WAAO,GAAG,UAAU,EAAE,IAAI,KAAK,KAAK,KAAK;AAAA,EAC3C;AACA,SAAO;AAAA,IACL,OAAO,aAAa;AAAA,IACpB,OAAO,IAAI,aAAa,KAAK,CAAC;AAAA,EAChC;AACF;","names":["qs"]}