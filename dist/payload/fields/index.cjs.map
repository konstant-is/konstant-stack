{"version":3,"sources":["../../../src/payload/fields/index.ts","../../../src/payload/fields/fieldConfig.ts","../../../src/payload/fields/fields.ts"],"sourcesContent":["export * from \"./fields\";\n","export interface FieldConfig {\n  localized?: boolean;\n  required?: boolean;\n  [key: string]: any;\n}\n\n// Singleton instance of FieldConfig\nconst fieldConfigInstance: FieldConfig = {\n  localized: false,\n  required: false,\n};\n\n// export const createFieldConfig = (config: FieldConfig): FieldConfig => {\n//   fieldConfigInstance = config;\n\n//   console.log(\"===================================================\");\n//   console.log(\"CREATING FIELD CONFIG\", fieldConfigInstance);\n\n//   return fieldConfigInstance;\n// };\n\nexport const getFieldConfig = (): FieldConfig => {\n  if (!fieldConfigInstance) {\n  }\n\n  const config = fieldConfigInstance || {};\n\n  return config;\n};\n","import {\n  ArrayField,\n  BlocksField,\n  CheckboxField,\n  CollapsibleField,\n  DateField,\n  EmailField,\n  Field,\n  GroupField,\n  JSONField,\n  NumberField,\n  NumberFieldManyValidation,\n  NumberFieldSingleValidation,\n  PointField,\n  RadioField,\n  RelationshipField,\n  RelationshipFieldManyValidation,\n  RelationshipFieldSingleValidation,\n  RichTextField,\n  RowField,\n  SelectField,\n  SelectFieldManyValidation,\n  SelectFieldSingleValidation,\n  Tab,\n  TabsField,\n  TextareaField,\n  TextField,\n  TextFieldManyValidation,\n  TextFieldSingleValidation,\n  UIField,\n  UploadField,\n  UploadFieldManyValidation,\n  UploadFieldSingleValidation,\n} from \"payload\";\n\nimport { getFieldConfig } from \"./fieldConfig\";\n\nconst createField = (field: Field): Field => {\n  const config = getFieldConfig();\n  const merged = { ...config, ...field };\n\n  return merged;\n};\n\nexport const field = (props: Field): Field => createField(props);\n\nexport const textField = (props: Omit<TextField, \"type\">): Field => {\n  const { hasMany = false, validate, ...rest } = props;\n\n  if (hasMany) {\n    return createField({\n      ...rest,\n      type: \"text\",\n      hasMany: true,\n      validate: validate as TextFieldManyValidation, // Ensure validate is correctly typed\n    });\n  }\n\n  return createField({\n    ...rest,\n    type: \"text\",\n    hasMany: false,\n    maxRows: undefined,\n    minRows: undefined,\n    validate: validate as TextFieldSingleValidation, // Ensure validate is correctly typed\n  });\n};\n\nexport const textareaField = (props: Omit<TextareaField, \"type\">): Field => {\n  return createField({\n    type: \"textarea\",\n    ...props,\n  });\n};\n\nexport const numberField = (props: Omit<NumberField, \"type\">): Field => {\n  const { hasMany = false, validate, ...rest } = props;\n  if (hasMany) {\n    return createField({\n      type: \"number\",\n      hasMany: true,\n      validate: validate as NumberFieldManyValidation, // Ensure validate is correctly typed\n      ...rest,\n    });\n  }\n\n  \n  return createField({\n    type: \"number\",\n    hasMany: false,\n    validate: validate as NumberFieldSingleValidation,\n    ...rest,\n    maxRows: undefined,\n    minRows: undefined,\n  });\n}\n\nexport const richTextField = (props: Omit<RichTextField, \"type\">): Field => {\n  return createField({\n    type: \"richText\",\n    ...props,\n  });\n};\n\nexport const selectField = (props: Omit<SelectField, \"type\">): Field => {\n  const { hasMany = false, validate, ...rest } = props;\n\n  if (hasMany) {\n    return createField({\n      ...rest,\n      type: \"select\",\n      hasMany: true,\n      validate: validate as SelectFieldManyValidation, // Ensure validate is correctly typed\n    });\n  }\n\n  return createField({\n    ...rest,\n    type: \"select\",\n    hasMany: false,\n    validate: validate as SelectFieldSingleValidation, // Ensure validate is correctly typed\n  });\n};\n\nexport const tabsField = (props: Omit<TabsField, \"type\">): Field => {\n  return createField({\n    type: \"tabs\",\n    ...props,\n  });\n};\n\nexport const tabField = (props: Tab): Tab => props;\n\nexport const blocksField = (props: Omit<BlocksField, \"type\">): Field => {\n  return createField({\n    type: \"blocks\",\n    ...props,\n  });\n};\n\nexport const uploadField = (props: Omit<UploadField, \"type\">): Field => {\n  const { hasMany = false, validate, maxRows, minRows, ...rest } = props;\n\n  if (hasMany) {\n    return createField({\n      ...rest,\n      type: \"upload\",\n      hasMany: true,\n      validate: validate as UploadFieldManyValidation, // Ensure validate is correctly typed\n      maxRows, // Include maxRows if hasMany is true\n      minRows, // Include minRows if hasMany is true\n    });\n  }\n\n  \n\n  return createField({\n    ...rest,\n    max: undefined,\n    min: undefined,\n    type: \"upload\",\n    hasMany: false,\n    validate: validate as UploadFieldSingleValidation, // Ensure validate is correctly typed\n    maxRows: undefined, // Explicitly set maxRows to undefined\n    minRows: undefined, // Explicitly set minRows to undefined\n  });\n};\n\nexport const groupField = (props: Omit<GroupField, \"type\">): Field => {\n  return createField({\n    type: \"group\",\n    ...props,\n  });\n};\n\nexport const rowField = (props: Omit<RowField, \"type\">): Field => {\n  return createField({\n    type: \"row\",\n    ...props,\n  });\n};\n\nexport const radioField = (props: Omit<RadioField, \"type\">): Field => {\n  return createField({\n    type: \"radio\",\n    ...props,\n  });\n};\n\nexport const checkboxField = (props: Omit<CheckboxField, \"type\">): Field => {\n  return createField({\n    type: \"checkbox\",\n    ...props,\n  });\n};\n\nexport const relationshipField = (\n  props: Omit<RelationshipField, \"type\">\n): Field => {\n  const { hasMany = false, validate, admin, ...rest } = props;\n\n  if (hasMany) {\n    return createField({\n      ...rest,\n      type: \"relationship\",\n      hasMany: true,\n      validate: validate as RelationshipFieldManyValidation, // Ensure validate is correctly typed\n      admin: {\n        ...admin,\n        sortOptions: admin?.sortOptions as string | undefined, // Ensure sortOptions is correctly typed\n      },\n      relationTo: rest.relationTo as string, // Ensure relationTo is correctly typed\n    });\n  }\n\n  // Remove max, min, maxRows, and minRows properties when hasMany is false\n  // const { max, min, ...restWithoutMaxMinRows } = rest;\n\n  return createField({\n    ...rest,\n    maxRows: undefined, // Explicitly set maxRows to undefined\n    minRows: undefined, // Explicitly set minRows to undefined\n    min: undefined, // Explicitly set min to undefined\n    max: undefined, // Explicitly set max to undefined\n    type: \"relationship\",\n    hasMany: false,\n    validate: validate as RelationshipFieldSingleValidation, // Ensure validate is correctly typed\n    admin: {\n      ...admin,\n      sortOptions: admin?.sortOptions as string | undefined, // Ensure sortOptions is correctly typed\n    },\n    relationTo: rest.relationTo as string, // Ensure relationTo is correctly typed\n  });\n};\n\nexport const arrayField = (props: Omit<ArrayField, \"type\">): Field => {\n  return createField({\n    type: \"array\",\n    ...props,\n  });\n};\n\nexport const dateField = (props: Omit<DateField, \"type\">): Field => {\n  return createField({\n    type: \"date\",\n    ...props,\n  });\n};\n\nexport const collapsibleField = (\n  props: Omit<CollapsibleField, \"type\">\n): CollapsibleField => {\n  return {\n    type: \"collapsible\",\n    ...props,\n    label: props.label,\n    admin: {\n      initCollapsed: true,\n      ...props.admin,\n    },\n  };\n};\n\nexport const pointField = (props: Omit<PointField, \"type\">): Field => {\n  return createField({\n    type: \"point\",\n    ...props,\n  });\n};\n\nexport const emailField = (props: Omit<EmailField, \"type\">): Field => {\n  return createField({\n    type: \"email\",\n    ...props,\n  });\n};\n\nexport const jsonField = (props: Omit<JSONField, \"type\">): Field => {\n  return createField({\n    type: \"json\",\n    ...props,\n  });\n}\n\nexport const uiField = (props: Omit<UIField, \"type\">): Field => {\n  return createField({\n    type: \"ui\",\n    ...props,\n  });\n}"],"mappings":"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","names":["field"]}