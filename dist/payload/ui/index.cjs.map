{"version":3,"sources":["../../../src/payload/ui/index.ts","../../../src/payload/ui/getReference.ts","../../../src/payload/ui/getRelation.ts"],"sourcesContent":["export * from \"./getReference.js\";\nexport * from \"./getRelation.js\";\n","export function getReference<T>(value: null | string | T | undefined) {\n  const isResolved = typeof value !== 'string'\n\n  return isResolved ? (value as T) : null\n}\n","import { getReference } from \"./getReference.js\";\n\ntype RelationProps<T> = {\n  relationTo: string;\n  value: string | T;\n};\n\ntype FetchQuery<T> = (params: { collection: string; id: string }) => Promise<T>;\n\nexport const getRelation = <T>(props: RelationProps<T>) => {\n  const { relationTo, value } = props;\n\n  const getValue = (): null | T => getReference(value);\n\n  const fetch = async <P>(query: FetchQuery<P>) => {\n    return await query({\n      id: value as string,\n      collection: relationTo,\n    });\n  };\n\n  const getOrFetchValue = async <P>(query: FetchQuery<P>): Promise<T | P> => {\n    const resolvedValue = getValue();\n    if (resolvedValue !== null) {\n      return resolvedValue;\n    }\n\n    const result = fetch(query);\n    return result;\n  };\n\n  return {\n    getOrFetchValue,\n    getValue,\n    relationTo,\n  };\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAO,SAAS,aAAgB,OAAsC;AACpE,QAAM,aAAa,OAAO,UAAU;AAEpC,SAAO,aAAc,QAAc;AACrC;;;ACKO,IAAM,cAAc,CAAI,UAA4B;AACzD,QAAM,EAAE,YAAY,MAAM,IAAI;AAE9B,QAAM,WAAW,MAAgB,aAAa,KAAK;AAEnD,QAAM,QAAQ,OAAU,UAAyB;AAC/C,WAAO,MAAM,MAAM;AAAA,MACjB,IAAI;AAAA,MACJ,YAAY;AAAA,IACd,CAAC;AAAA,EACH;AAEA,QAAM,kBAAkB,OAAU,UAAyC;AACzE,UAAM,gBAAgB,SAAS;AAC/B,QAAI,kBAAkB,MAAM;AAC1B,aAAO;AAAA,IACT;AAEA,UAAM,SAAS,MAAM,KAAK;AAC1B,WAAO;AAAA,EACT;AAEA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;","names":[]}