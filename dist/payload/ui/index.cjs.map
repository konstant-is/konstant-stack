{"version":3,"sources":["../../../src/payload/ui/index.ts","../../../src/payload/ui/getReference.ts","../../../src/payload/ui/getRelation.ts"],"sourcesContent":["export * from \"./getReference.js\";\nexport * from \"./getRelation.js\";\n","import { DefaultDocumentIDType } from \"payload\";\n\nexport function getReference<T>(\n  value: DefaultDocumentIDType | T | null | undefined\n) {\n  const isResolved = typeof value !== \"string\";\n  return isResolved ? (value as T) : null;\n}\n","import { CollectionSlug, DefaultDocumentIDType, JsonValue } from \"payload\";\nimport { getReference } from \"./getReference.js\";\n\ntype RelationProps<T> = {\n  relationTo: string;\n  value: T | DefaultDocumentIDType;\n};\n\ntype FetchDocArgs = { id: DefaultDocumentIDType; collection: CollectionSlug };\n\nexport const getRelation = <T>(props: RelationProps<T>) => {\n  const { relationTo, value } = props;\n\n  const getValue = (): null | T => getReference(value);\n\n  const getOrFetchValue = async (\n    queryCb: (args: FetchDocArgs) => Promise<T | null>\n  ): Promise<T | null> => {\n    const resolvedValue = getValue();\n    if (resolvedValue !== null) {\n      return resolvedValue;\n    }\n\n    try {\n      const result = await queryCb({\n        id: value as DefaultDocumentIDType,\n        collection: relationTo,\n      });\n\n      return result;\n    } catch (e) {\n      console.error(e);\n      return null;\n    }\n  };\n\n  return {\n    getOrFetchValue,\n    getValue,\n    relationTo,\n  };\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACEO,SAAS,aACd,OACA;AACA,QAAM,aAAa,OAAO,UAAU;AACpC,SAAO,aAAc,QAAc;AACrC;;;ACGO,IAAM,cAAc,CAAI,UAA4B;AACzD,QAAM,EAAE,YAAY,MAAM,IAAI;AAE9B,QAAM,WAAW,MAAgB,aAAa,KAAK;AAEnD,QAAM,kBAAkB,OACtB,YACsB;AACtB,UAAM,gBAAgB,SAAS;AAC/B,QAAI,kBAAkB,MAAM;AAC1B,aAAO;AAAA,IACT;AAEA,QAAI;AACF,YAAM,SAAS,MAAM,QAAQ;AAAA,QAC3B,IAAI;AAAA,QACJ,YAAY;AAAA,MACd,CAAC;AAED,aAAO;AAAA,IACT,SAAS,GAAG;AACV,cAAQ,MAAM,CAAC;AACf,aAAO;AAAA,IACT;AAAA,EACF;AAEA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;","names":[]}