{"version":3,"sources":["../../../src/payload/ui/index.ts","../../../src/payload/ui/getReference.ts","../../../src/payload/ui/getRelation.ts"],"sourcesContent":["export * from \"./getReference.js\";\nexport * from \"./getRelation.js\";\n","export function getReference<T>(value: null | string | T | undefined) {\n  const isResolved = typeof value !== 'string'\n\n  return isResolved ? (value as T) : null\n}\n","import { DefaultDocumentIDType, JsonValue } from \"payload\";\nimport { getReference } from \"./getReference.js\";\n\ntype RelationValue =\n  | {\n      [key: string]: JsonValue;\n      id: DefaultDocumentIDType;\n    }\n  | DefaultDocumentIDType;\n\ntype RelationProps<T extends RelationValue> = {\n  relationTo: string;\n  value: T;\n};\n\nexport const getRelation = <T extends RelationValue>(\n  props: RelationProps<T>\n) => {\n  const { relationTo, value } = props;\n\n  const getValue = (): null | T => getReference(value);\n\n  const getOrFetchValue = async (queryCb: () => Promise<T>): Promise<T> => {\n    const resolvedValue = getValue();\n    if (resolvedValue !== null) {\n      return resolvedValue;\n    }\n\n    const result = await queryCb();\n    return result;\n  };\n\n  return {\n    getOrFetchValue,\n    getValue,\n    relationTo,\n  };\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAO,SAAS,aAAgB,OAAsC;AACpE,QAAM,aAAa,OAAO,UAAU;AAEpC,SAAO,aAAc,QAAc;AACrC;;;ACWO,IAAM,cAAc,CACzB,UACG;AACH,QAAM,EAAE,YAAY,MAAM,IAAI;AAE9B,QAAM,WAAW,MAAgB,aAAa,KAAK;AAEnD,QAAM,kBAAkB,OAAO,YAA0C;AACvE,UAAM,gBAAgB,SAAS;AAC/B,QAAI,kBAAkB,MAAM;AAC1B,aAAO;AAAA,IACT;AAEA,UAAM,SAAS,MAAM,QAAQ;AAC7B,WAAO;AAAA,EACT;AAEA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;","names":[]}