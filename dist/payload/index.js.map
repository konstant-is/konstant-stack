{"version":3,"sources":["../../src/payload/custom/slugField/component.tsx","../../src/payload/fields/fieldConfig.ts","../../src/payload/fields/fields.ts","../../src/payload/utils/blockBuilder.ts","../../src/payload/utils/createConfig.ts","../../src/payload/utils/createField.ts"],"sourcesContent":["\"use client\";\n\nimport React, { useCallback, useEffect } from \"react\";\nimport {\n  Button,\n  FieldLabel,\n  TextInput,\n  useField,\n  useForm,\n  useFormFields,\n} from \"@payloadcms/ui\";\nimport { TextFieldClientProps } from \"payload\";\n\nimport \"./slug.scss\";\nimport { formatSlug } from \"@/utils/string\";\n\ntype SlugComponentProps = {\n  fieldToUse: string;\n  checkboxFieldPath: string;\n} & TextFieldClientProps;\n\nexport const SlugComponent: React.FC<SlugComponentProps> = ({\n  field,\n  fieldToUse,\n  checkboxFieldPath: checkboxFieldPathFromProps,\n  path,\n  readOnly: readOnlyFromProps,\n}) => {\n  const { label } = field;\n\n  const checkboxFieldPath = path?.includes(\".\")\n    ? `${path}.${checkboxFieldPathFromProps}`\n    : checkboxFieldPathFromProps;\n\n  const { value, setValue } = useField<string>({ path: path || field.name });\n\n  const { dispatchFields } = useForm();\n\n  // The value of the checkbox\n  // We're using separate useFormFields to minimise re-renders\n  const checkboxValue = useFormFields(([fields]) => {\n    return fields[checkboxFieldPath]?.value as string;\n  });\n\n  // The value of the field we're listening to for the slug\n  const targetFieldValue = useFormFields(([fields]) => {\n    return fields[fieldToUse]?.value as string;\n  });\n\n  useEffect(() => {\n    if (checkboxValue) {\n      if (targetFieldValue) {\n        const formattedSlug = formatSlug(targetFieldValue);\n\n        if (value !== formattedSlug) setValue(formattedSlug);\n      } else {\n        if (value !== \"\") setValue(\"\");\n      }\n    }\n  }, [targetFieldValue, checkboxValue, setValue, value]);\n\n  const handleLock = useCallback(\n    (e: any) => {\n      e.preventDefault();\n\n      dispatchFields({\n        type: \"UPDATE\",\n        path: checkboxFieldPath,\n        value: !checkboxValue,\n      });\n    },\n    [checkboxValue, checkboxFieldPath, dispatchFields],\n  );\n\n  const readOnly = readOnlyFromProps || checkboxValue;\n\n  return (\n    <div className=\"field-type slug-field-component\">\n      <div className=\"label-wrapper\">\n        <FieldLabel htmlFor={`field-${path}`} label={label} />\n\n        <Button className=\"lock-button\" buttonStyle=\"none\" onClick={handleLock}>\n          {checkboxValue ? \"Unlock\" : \"Lock\"}\n        </Button>\n      </div>\n\n      <TextInput\n        value={value}\n        onChange={setValue}\n        path={path || field.name}\n        readOnly={Boolean(readOnly)}\n      />\n    </div>\n  );\n};\n","export interface FieldConfig {\n  localized?: boolean;\n  required?: boolean;\n  [key: string]: any;\n}\n\n// Singleton instance of FieldConfig\nconst fieldConfigInstance: FieldConfig = {\n  localized: false,\n  required: false,\n};\n\n// export const createFieldConfig = (config: FieldConfig): FieldConfig => {\n//   fieldConfigInstance = config;\n\n//   console.log(\"===================================================\");\n//   console.log(\"CREATING FIELD CONFIG\", fieldConfigInstance);\n\n//   return fieldConfigInstance;\n// };\n\nexport const getFieldConfig = (): FieldConfig => {\n  if (!fieldConfigInstance) {\n  }\n\n  const config = fieldConfigInstance || {};\n\n  return config;\n};\n","import {\n  ArrayField,\n  BlocksField,\n  CheckboxField,\n  CollapsibleField,\n  DateField,\n  EmailField,\n  Field,\n  GroupField,\n  JSONField,\n  NumberField,\n  NumberFieldManyValidation,\n  NumberFieldSingleValidation,\n  PointField,\n  RadioField,\n  RelationshipField,\n  RelationshipFieldManyValidation,\n  RelationshipFieldSingleValidation,\n  RichTextField,\n  RowField,\n  SelectField,\n  SelectFieldManyValidation,\n  SelectFieldSingleValidation,\n  Tab,\n  TabsField,\n  TextareaField,\n  TextField,\n  TextFieldManyValidation,\n  TextFieldSingleValidation,\n  UIField,\n  UploadField,\n  UploadFieldManyValidation,\n  UploadFieldSingleValidation,\n} from \"payload\";\n\nimport { getFieldConfig } from \"./fieldConfig\";\n\nconst createField = (field: Field): Field => {\n  const config = getFieldConfig();\n  const merged = { ...config, ...field };\n\n  return merged;\n};\n\nexport const field = (props: Field): Field => createField(props);\n\nexport const textField = (props: Omit<TextField, \"type\">): Field => {\n  const { hasMany = false, validate, ...rest } = props;\n\n  if (hasMany) {\n    return createField({\n      ...rest,\n      type: \"text\",\n      hasMany: true,\n      validate: validate as TextFieldManyValidation, // Ensure validate is correctly typed\n    });\n  }\n\n  return createField({\n    ...rest,\n    type: \"text\",\n    hasMany: false,\n    maxRows: undefined,\n    minRows: undefined,\n    validate: validate as TextFieldSingleValidation, // Ensure validate is correctly typed\n  });\n};\n\nexport const textareaField = (props: Omit<TextareaField, \"type\">): Field => {\n  return createField({\n    type: \"textarea\",\n    ...props,\n  });\n};\n\nexport const numberField = (props: Omit<NumberField, \"type\">): Field => {\n  const { hasMany = false, validate, ...rest } = props;\n  if (hasMany) {\n    return createField({\n      type: \"number\",\n      hasMany: true,\n      validate: validate as NumberFieldManyValidation, // Ensure validate is correctly typed\n      ...rest,\n    });\n  }\n\n  \n  return createField({\n    type: \"number\",\n    hasMany: false,\n    validate: validate as NumberFieldSingleValidation,\n    ...rest,\n    maxRows: undefined,\n    minRows: undefined,\n  });\n}\n\nexport const richTextField = (props: Omit<RichTextField, \"type\">): Field => {\n  return createField({\n    type: \"richText\",\n    ...props,\n  });\n};\n\nexport const selectField = (props: Omit<SelectField, \"type\">): Field => {\n  const { hasMany = false, validate, ...rest } = props;\n\n  if (hasMany) {\n    return createField({\n      ...rest,\n      type: \"select\",\n      hasMany: true,\n      validate: validate as SelectFieldManyValidation, // Ensure validate is correctly typed\n    });\n  }\n\n  return createField({\n    ...rest,\n    type: \"select\",\n    hasMany: false,\n    validate: validate as SelectFieldSingleValidation, // Ensure validate is correctly typed\n  });\n};\n\nexport const tabsField = (props: Omit<TabsField, \"type\">): Field => {\n  return createField({\n    type: \"tabs\",\n    ...props,\n  });\n};\n\nexport const tabField = (props: Tab): Tab => props;\n\nexport const blocksField = (props: Omit<BlocksField, \"type\">): Field => {\n  return createField({\n    type: \"blocks\",\n    ...props,\n  });\n};\n\nexport const uploadField = (props: Omit<UploadField, \"type\">): Field => {\n  const { hasMany = false, validate, maxRows, minRows, ...rest } = props;\n\n  if (hasMany) {\n    return createField({\n      ...rest,\n      type: \"upload\",\n      hasMany: true,\n      validate: validate as UploadFieldManyValidation, // Ensure validate is correctly typed\n      maxRows, // Include maxRows if hasMany is true\n      minRows, // Include minRows if hasMany is true\n    });\n  }\n\n  \n\n  return createField({\n    ...rest,\n    max: undefined,\n    min: undefined,\n    type: \"upload\",\n    hasMany: false,\n    validate: validate as UploadFieldSingleValidation, // Ensure validate is correctly typed\n    maxRows: undefined, // Explicitly set maxRows to undefined\n    minRows: undefined, // Explicitly set minRows to undefined\n  });\n};\n\nexport const groupField = (props: Omit<GroupField, \"type\">): Field => {\n  return createField({\n    type: \"group\",\n    ...props,\n  });\n};\n\nexport const rowField = (props: Omit<RowField, \"type\">): Field => {\n  return createField({\n    type: \"row\",\n    ...props,\n  });\n};\n\nexport const radioField = (props: Omit<RadioField, \"type\">): Field => {\n  return createField({\n    type: \"radio\",\n    ...props,\n  });\n};\n\nexport const checkboxField = (props: Omit<CheckboxField, \"type\">): Field => {\n  return createField({\n    type: \"checkbox\",\n    ...props,\n  });\n};\n\nexport const relationshipField = (\n  props: Omit<RelationshipField, \"type\">\n): Field => {\n  const { hasMany = false, validate, admin, ...rest } = props;\n\n  if (hasMany) {\n    return createField({\n      ...rest,\n      type: \"relationship\",\n      hasMany: true,\n      validate: validate as RelationshipFieldManyValidation, // Ensure validate is correctly typed\n      admin: {\n        ...admin,\n        sortOptions: admin?.sortOptions as string | undefined, // Ensure sortOptions is correctly typed\n      },\n      relationTo: rest.relationTo as string, // Ensure relationTo is correctly typed\n    });\n  }\n\n  // Remove max, min, maxRows, and minRows properties when hasMany is false\n  // const { max, min, ...restWithoutMaxMinRows } = rest;\n\n  return createField({\n    ...rest,\n    maxRows: undefined, // Explicitly set maxRows to undefined\n    minRows: undefined, // Explicitly set minRows to undefined\n    min: undefined, // Explicitly set min to undefined\n    max: undefined, // Explicitly set max to undefined\n    type: \"relationship\",\n    hasMany: false,\n    validate: validate as RelationshipFieldSingleValidation, // Ensure validate is correctly typed\n    admin: {\n      ...admin,\n      sortOptions: admin?.sortOptions as string | undefined, // Ensure sortOptions is correctly typed\n    },\n    relationTo: rest.relationTo as string, // Ensure relationTo is correctly typed\n  });\n};\n\nexport const arrayField = (props: Omit<ArrayField, \"type\">): Field => {\n  return createField({\n    type: \"array\",\n    ...props,\n  });\n};\n\nexport const dateField = (props: Omit<DateField, \"type\">): Field => {\n  return createField({\n    type: \"date\",\n    ...props,\n  });\n};\n\nexport const collapsibleField = (\n  props: Omit<CollapsibleField, \"type\">\n): CollapsibleField => {\n  return {\n    type: \"collapsible\",\n    ...props,\n    label: props.label,\n    admin: {\n      initCollapsed: true,\n      ...props.admin,\n    },\n  };\n};\n\nexport const pointField = (props: Omit<PointField, \"type\">): Field => {\n  return createField({\n    type: \"point\",\n    ...props,\n  });\n};\n\nexport const emailField = (props: Omit<EmailField, \"type\">): Field => {\n  return createField({\n    type: \"email\",\n    ...props,\n  });\n};\n\nexport const jsonField = (props: Omit<JSONField, \"type\">): Field => {\n  return createField({\n    type: \"json\",\n    ...props,\n  });\n}\n\nexport const uiField = (props: Omit<UIField, \"type\">): Field => {\n  return createField({\n    type: \"ui\",\n    ...props,\n  });\n}","import { Block } from \"payload\";\n\ntype BlockConfig = Record<string, (props: unknown) => Block>;\ntype BlockKey = keyof BlockConfig;\n\nexport const blockBuilder = (config: BlockConfig) => {\n  const helper = blockBuilderHelper({\n    config,\n  });\n\n  return helper;\n};\n\nexport const blockBuilderHelper = (props: { config: BlockConfig }) => {\n  const { config } = props;\n\n  let blockKeys =\n    Object.keys(config).filter((b) => {\n      const blockSettings = config[b];\n\n      if (typeof blockSettings === \"boolean\" && blockSettings === false) {\n        return false;\n      }\n\n      return true;\n    }) || [];\n\n  const exclude = (...blocks: BlockKey[]) => {\n    // Filter out block keys that are included in the blocks parameter\n    blockKeys = blockKeys.filter((key: BlockKey) => !blocks.includes(key));\n    return builder;\n  };\n\n  const filter = (predicate: (value: string, index: number) => boolean) => {\n    blockKeys = blockKeys.filter(predicate);\n  };\n\n  const only = (...blocks: BlockKey[]) => {\n    // Filter out block keys that are not included in the blocks parameter\n    blockKeys = blockKeys.filter((key: BlockKey) => blocks.includes(key));\n    return builder;\n  };\n\n  const build = (params?: unknown): Block[] => {\n    const blocks = blockKeys.map((key) => {\n      const block = config[key];\n\n      if (!block) {\n        console.error(`Block ${key} not found in blockMap`);\n        return null;\n      }\n      return block(params);\n    });\n    return blocks.filter((b) => b !== null) as Block[];\n  };\n\n  const builder = {\n    filter,\n    exclude,\n    build,\n    only,\n  };\n\n  return builder;\n};\n","import { Block, CollectionConfig, GlobalConfig } from \"payload\";\n\nexport const createCollectionConfig = (\n  config: CollectionConfig\n): CollectionConfig => {\n  return {\n    access: {\n      read: () => true,\n      ...config.access,\n    },\n    ...config,\n  };\n};\n\nexport const createGlobalConfig = (\n  config: GlobalConfig\n): GlobalConfig => {\n  return {\n    access: {\n      read: () => true,\n      ...config.access,\n    },\n    ...config,\n  };\n};\n\n// type Props<P = unknown> = P;\n\n// type BlockCreationFunction = <P>(props: Props<P>) => Block;\n\n// export const createBlock = (blockCreationFunction: BlockCreationFunction) => {\n//   return (props: Props) => {\n//     const result = blockCreationFunction(props);\n//     return createBlockHelper(result);\n//   };\n// };\n\nexport const createBlock = (block: Block): Block => {\n  const fallbackInterfaceName = () => block.slug.includes(\"Block\") ? block.slug : `${block.slug}Block`;  \n  return {\n    ...block,\n    interfaceName: block?.interfaceName || fallbackInterfaceName(),\n  };\n};\n","import { deepMerge } from \"@/utils/object\";\nimport { Field } from \"payload\";\n\nexport type CreateFieldProps<P = unknown> = P & {\n  overrides?: Record<string, unknown>;\n  fields?: Field[];\n  required?: boolean;\n  label?: string;\n  name?: string;\n  condition?: (data: any, siblingData: any) => boolean;\n  hideGutter?: boolean;\n  hidden?: boolean;\n  description?: string;\n  localized?: boolean;\n};\n\ntype FieldCreationFunction<P = unknown> = (props: CreateFieldProps<P>) => Field;\n\nexport function createField<P>(fieldFn: FieldCreationFunction<P>) {\n  return (props: CreateFieldProps<P> = {} as CreateFieldProps<P>) => {\n    const field = fieldFn(props);\n    return deepMerge(field, props.overrides || {});\n  };\n}\n"],"mappings":"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","names":["field","field","createField","field"]}