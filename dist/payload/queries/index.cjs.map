{"version":3,"sources":["../../../src/payload/queries/index.ts","../../../src/payload/queries/getDocumentById.ts","../../../src/payload/utils/getPayloadContext.ts","../../../src/payload/utils/getLocale.ts"],"sourcesContent":["export * from './getDocumentById.js'\n","import type { CollectionSlug, SanitizedConfig } from \"payload\";\nimport { cache } from \"react\";\n\nimport type { PayloadQuery } from \"../types.js\";\n\nimport { getPayloadContext } from \"../utils/getPayloadContext.js\";\n\ntype GetDocumentByIdQuery = PayloadQuery<{\n  collection: CollectionSlug;\n  id: string;\n}>;\nexport const getDocumentById = cache(\n  async (\n    config: Promise<SanitizedConfig> | SanitizedConfig,\n    params: GetDocumentByIdQuery\n  ) => {\n    try {\n      const { id, collection } = params;\n      const { payload, query } = await getPayloadContext(config, params);\n\n      console.info(`Fetching ${collection} with id: ${id}`);\n      const result = await payload.findByID({\n        id,\n        collection,\n        ...query,\n        depth: 30,\n      });\n\n      if (!result) {\n        throw new Error(\n          `Document with id ${id} not found in collection ${collection}`\n        );\n      }\n\n      return result;\n    } catch (error) {\n      console.error(error);\n      return null;\n    }\n  }\n);\n","import type { SanitizedConfig } from \"payload\";\n\nimport { draftMode } from \"next/headers.js\";\nimport { getPayload } from \"payload\";\n\nimport type { PayloadQuery } from \"../types.js\";\n\nimport { getLocale } from \"./getLocale.js\";\n\nexport const getPayloadContext = async <T extends SanitizedConfig>(\n  config: Promise<T> | T,\n  params: PayloadQuery\n) => {\n  const { isEnabled: draft } = await draftMode();\n  const payload = await getPayload({ config });\n  const processedLocale = getLocale(payload.config, params.locale);\n  const query = {\n    draft,\n    locale: processedLocale,\n    overrideAccess: draft,\n  };\n  return { draft, locale: processedLocale, payload, query };\n};\n","import type { Locale, SanitizedConfig } from \"payload\";\n\n/**\n * Extracts the type of locale codes dynamically from the Payload config.\n */\ntype ExtractLocaleCodes<T extends SanitizedConfig> = T[\"localization\"] extends {\n  localeCodes: readonly (infer L)[];\n}\n  ? L\n  : never;\n\n/**\n * Checks if a given locale is valid based on the available locale codes.\n * @param locale - The locale string to validate.\n * @param localeCodes - The list of valid locale codes.\n * @returns True if the locale is valid, otherwise false.\n */\nconst isLocale = <T extends string>(\n  locale: null | string | undefined,\n  localeCodes: readonly T[]\n): locale is T => {\n  return !!locale && localeCodes.includes(locale as T);\n};\n\n/**\n * Validates and returns the locale.\n * @param config - The Payload config object.\n * @param locale - The locale string to validate.\n * @returns The validated locale.\n */\nexport const getLocale = <T extends SanitizedConfig>(\n  config: T,\n  locale: null | string | undefined\n): ExtractLocaleCodes<T> => {\n  const { localization } = config;\n  if (!localization) {\n    throw new Error(`Localization is not supported by Payload`);\n  }\n\n  const { defaultLocale, localeCodes } = localization;\n\n  if (isLocale(locale, localeCodes)) {\n    return locale as ExtractLocaleCodes<T>;\n  }\n\n  return defaultLocale as ExtractLocaleCodes<T>;\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACCA,mBAAsB;;;ACCtB,qBAA0B;AAC1B,qBAA2B;;;ACc3B,IAAM,WAAW,CACf,QACA,gBACgB;AAChB,SAAO,CAAC,CAAC,UAAU,YAAY,SAAS,MAAW;AACrD;AAQO,IAAM,YAAY,CACvB,QACA,WAC0B;AAC1B,QAAM,EAAE,aAAa,IAAI;AACzB,MAAI,CAAC,cAAc;AACjB,UAAM,IAAI,MAAM,0CAA0C;AAAA,EAC5D;AAEA,QAAM,EAAE,eAAe,YAAY,IAAI;AAEvC,MAAI,SAAS,QAAQ,WAAW,GAAG;AACjC,WAAO;AAAA,EACT;AAEA,SAAO;AACT;;;ADrCO,IAAM,oBAAoB,OAC/B,QACA,WACG;AACH,QAAM,EAAE,WAAW,MAAM,IAAI,UAAM,0BAAU;AAC7C,QAAM,UAAU,UAAM,2BAAW,EAAE,OAAO,CAAC;AAC3C,QAAM,kBAAkB,UAAU,QAAQ,QAAQ,OAAO,MAAM;AAC/D,QAAM,QAAQ;AAAA,IACZ;AAAA,IACA,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AACA,SAAO,EAAE,OAAO,QAAQ,iBAAiB,SAAS,MAAM;AAC1D;;;ADXO,IAAM,sBAAkB;AAAA,EAC7B,OACE,QACA,WACG;AACH,QAAI;AACF,YAAM,EAAE,IAAI,WAAW,IAAI;AAC3B,YAAM,EAAE,SAAS,MAAM,IAAI,MAAM,kBAAkB,QAAQ,MAAM;AAEjE,cAAQ,KAAK,YAAY,UAAU,aAAa,EAAE,EAAE;AACpD,YAAM,SAAS,MAAM,QAAQ,SAAS;AAAA,QACpC;AAAA,QACA;AAAA,QACA,GAAG;AAAA,QACH,OAAO;AAAA,MACT,CAAC;AAED,UAAI,CAAC,QAAQ;AACX,cAAM,IAAI;AAAA,UACR,oBAAoB,EAAE,4BAA4B,UAAU;AAAA,QAC9D;AAAA,MACF;AAEA,aAAO;AAAA,IACT,SAAS,OAAO;AACd,cAAQ,MAAM,KAAK;AACnB,aAAO;AAAA,IACT;AAAA,EACF;AACF;","names":[]}