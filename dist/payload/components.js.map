{"version":3,"sources":["../../src/payload/custom/permalink/component.tsx","../../src/payload/custom/slugField/component.tsx","../../src/payload/custom/uriField/component.tsx","../../src/payload/custom/rowLabel/component.tsx"],"sourcesContent":["\"use client\";\n\nimport { useMemo } from \"react\";\nimport { useDocumentInfo, useFormFields } from \"@payloadcms/ui\";\nimport { UIFieldClientProps } from \"payload\";\nimport { getClientSideURL } from \"@/utils/getUrl\";\n\ntype PermalinkProps = {\n  fieldToUse: string;\n} & UIFieldClientProps;\n\nexport const PermalinkField = ({ fieldToUse }: PermalinkProps) => {\n  const serverURL = getClientSideURL();\n\n  const { id } = useDocumentInfo();\n\n  // Listen to the field value\n  const targetFieldValue = useFormFields(([fields]) => {\n    return fields[fieldToUse]?.value as string;\n  });\n\n  // Compute permalink only when necessary\n  const permalink = useMemo(() => {\n    if (!targetFieldValue) return \"\";\n    return `${serverURL}${targetFieldValue}`;\n  }, [serverURL, targetFieldValue]);\n\n  // Display message if the document hasn't been saved\n  if (!id) {\n    return (\n      <p className=\"permalinksField\">\n        Save the document to generate a permalink.\n      </p>\n    );\n  }\n\n  // Handle cases where `fieldToUse` is invalid or missing\n  if (!fieldToUse) {\n    return (\n      <p className=\"permalinksField\">\n        Please provide a valid field name to generate the permalink.\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"field-type permalinksField\">\n      <strong>Permalink:</strong>{\" \"}\n      <a href={permalink} target=\"_blank\" rel=\"noopener noreferrer\">\n        {permalink}\n      </a>\n    </div>\n  );\n};\n","\"use client\";\n\nimport React, { useCallback, useEffect, useMemo } from \"react\";\nimport \"./slug.scss\";\n\nimport {\n  Button,\n  FieldLabel,\n  TextInput,\n  useField,\n  useForm,\n  useFormFields,\n} from \"@payloadcms/ui\";\nimport { TextFieldClientProps } from \"payload\";\nimport { formatSlug } from \"@/utils/string\";\n\ntype SlugComponentProps = {\n  fieldToUse: string;\n  checkboxFieldPath: string;\n} & TextFieldClientProps;\n\nexport const SlugComponent: React.FC<SlugComponentProps> = ({\n  field,\n  fieldToUse,\n  checkboxFieldPath: checkboxFieldPathFromProps,\n  path,\n  readOnly: readOnlyFromProps,\n}) => {\n  const { label } = field;\n\n  // Memoize checkboxFieldPath for performance\n  const checkboxFieldPath = useMemo(\n    () =>\n      path?.includes(\".\")\n        ? `${path}.${checkboxFieldPathFromProps}`\n        : checkboxFieldPathFromProps,\n    [path, checkboxFieldPathFromProps],\n  );\n\n  const { value, setValue } = useField<string>({ path: path || field.name });\n  const { dispatchFields } = useForm();\n\n  // Separate hooks for fields to minimize re-renders\n  const checkboxValue = useFormFields(\n    useCallback(\n      ([fields]) => fields[checkboxFieldPath]?.value as boolean,\n      [checkboxFieldPath],\n    ),\n  );\n\n  const targetFieldValue = useFormFields(\n    useCallback(\n      ([fields]) => fields[fieldToUse]?.value as string,\n      [fieldToUse],\n    ),\n  );\n\n  useEffect(() => {\n    if (checkboxValue) {\n      const formattedSlug = targetFieldValue\n        ? formatSlug(targetFieldValue)\n        : \"\";\n\n      if (value !== formattedSlug) {\n        setValue(formattedSlug);\n      }\n    }\n  }, [targetFieldValue, checkboxValue, setValue, value]);\n\n  const handleLock = useCallback(\n    (e: React.MouseEvent<Element, MouseEvent>) => {\n      e.preventDefault();\n      dispatchFields({\n        type: \"UPDATE\",\n        path: checkboxFieldPath,\n        value: !checkboxValue,\n      });\n    },\n    [checkboxValue, checkboxFieldPath, dispatchFields],\n  );\n\n  const readOnly = useMemo(\n    () => readOnlyFromProps || checkboxValue,\n    [readOnlyFromProps, checkboxValue],\n  );\n\n  return (\n    <div className=\"field-type slug-field-component\">\n      <div className=\"label-wrapper\">\n        <FieldLabel htmlFor={`field-${path}`} label={label} />\n        <Button\n          className=\"lock-button\"\n          buttonStyle=\"none\"\n          onClick={handleLock}\n          aria-pressed={checkboxValue}\n        >\n          {checkboxValue ? \"Unlock\" : \"Lock\"}\n        </Button>\n      </div>\n\n      <TextInput\n        value={value}\n        onChange={setValue}\n        path={path || field.name}\n        readOnly={Boolean(readOnly)}\n      />\n    </div>\n  );\n};\n","\"use client\";\n\nimport { FieldLabel, TextInput, useField, Button } from \"@payloadcms/ui\";\nimport { TextFieldClientProps } from \"payload\";\nimport { useState } from \"react\";\n\ntype UriFieldProps = {\n  path?: string; // Make path optional\n  field?: { name: string; label?: string }; // Allow flexibility in field structure\n} & TextFieldClientProps;\n\nexport const UriComponent = ({ path, field }: UriFieldProps) => {\n  const safePath = path || field?.name;\n  const { value = \"\", setValue } = useField<string>({ path: safePath });\n  const label = field?.label || \"URI\";\n\n  const [copied, setCopied] = useState(false);\n\n  const handleCopyToClipboard = () => {\n    if (value) {\n      navigator.clipboard.writeText(value).then(() => {\n        setCopied(true);\n        setTimeout(() => setCopied(false), 2000); // Reset after 2 seconds\n      });\n    }\n  };\n\n  // Safeguard for missing path or field.name\n  if (!safePath) {\n    console.error(\"UriComponent: Missing `path` or `field.name`\");\n    return <div>Error: Missing required path or field configuration.</div>;\n  }\n\n  return (\n    <div className=\"field-type uri-field-component\">\n      {/* Label */}\n      <div className=\"label-wrapper\">\n        <FieldLabel htmlFor={`field-${safePath}`} label={label} />\n        <Button\n          className=\"copy-button\"\n          buttonStyle=\"none\"\n          onClick={handleCopyToClipboard}\n        >\n          Copy\n        </Button>\n      </div>\n\n      {/* Text Input */}\n      <TextInput\n        value={value}\n        onChange={setValue}\n        path={safePath}\n        readOnly={true}\n        aria-readonly=\"true\"\n        style={{ flex: \"1\" }}\n      />\n\n      {/* Copy Feedback */}\n      {copied && <small style={{ color: \"green\" }}>Copied to clipboard!</small>}\n    </div>\n  );\n};\n","\"use client\";\n\nimport { getNestedProperty } from \"@/utils/object\";\nimport { useRowLabel } from \"@payloadcms/ui\";\n\ntype Props = {\n  fieldName: string;\n  prefix?: string;\n  fallback?: string;\n};\nexport const ArrayRowLabel = (props: Props) => {\n  const { label } = useArrayRowLabel(props);\n\n  return <div>{label}</div>;\n};\n\nconst useArrayRowLabel = (props: Props) => {\n  const { prefix, fieldName, fallback } = props;\n  const { data, rowNumber } = useRowLabel<{\n    [key: string]: any; // Allow indexing with a string key\n  }>();\n  const rowNr = `${(rowNumber || 0) + 1}`;\n\n  function getField(): any {\n    const prop = getNestedProperty(data, fieldName);\n\n    if (!prop) {\n      console.error(`Field ${fieldName} not found in data`, data);\n    }\n    return prop;\n  }\n\n  const getLabel = () => {\n    const field = getField();\n\n    return field || fallback || \"Item\";\n  };\n\n  const getFullLabel = () => {\n    const label = getLabel();\n    return `${prefix || \"\"} ${rowNr}: ${label}`;\n  };\n  return {\n    label: getFullLabel(),\n    rowNr: `${(rowNumber || 0) + 1}`,\n  };\n};\n"],"mappings":"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","names":["useMemo","useFormFields","jsx","jsxs","useMemo","useFormFields","FieldLabel","TextInput","useField","Button","jsx","jsxs","jsx"]}