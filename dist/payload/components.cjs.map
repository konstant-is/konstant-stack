{"version":3,"sources":["../../src/payload/components.ts","../../src/payload/custom/permalink/component.tsx","../../src/utils/getUrl.ts","../../src/payload/custom/slugField/component.tsx","../../src/utils/string.ts","../../src/payload/custom/uriField/component.tsx","../../src/utils/object.ts","../../src/payload/custom/rowLabel/component.tsx"],"sourcesContent":["\"use client\";\n\nexport * from \"./custom/permalink/component\";\nexport * from \"./custom/slugField/component\";\nexport * from \"./custom/uriField/component\";\nexport * from \"./custom/rowLabel/component\";\n","\"use client\";\n\nimport { useDocumentInfo, useFormFields } from \"@payloadcms/ui\";\nimport { UIFieldClientComponent } from \"payload\";\nimport { getClientSideURL } from \"@/utils/getUrl\";\n\nexport const PermalinkField: UIFieldClientComponent = () => {\n  const serverURL = getClientSideURL();\n\n  const { id, collectionSlug } = useDocumentInfo();\n\n  // Subscribe to the slug and uri fields for reactive updates\n  const [slugFieldValue, setSlugFieldValue] = useFormFields(([fields]) => {\n    return fields[\"slug\"]?.value as string;\n  });\n\n  const [uriFieldValue, setUriFieldValue] = useFormFields(([fields]) => {\n    return fields[\"uri\"]?.value as string;\n  });\n\n  // Only display permalink if the document has been saved and has an ID\n  if (!id) {\n    return (\n      <div className=\"permalinksField\">\n        Save the document to generate a permalink.\n      </div>\n    );\n  }\n\n  const permalink = `${serverURL}${uriFieldValue}`;\n\n  return (\n    <div className=\"field-type permalinksField\">\n      <strong>Permalink:</strong>{\" \"}\n      <a href={permalink} target=\"_blank\">\n        {permalink}\n      </a>\n    </div>\n  );\n};\n\nexport default PermalinkField;\n","import { canUseDOM } from \"@payloadcms/ui/utilities/canUseDOM\";\n\nexport const getServerSideURL = () => {\n  let url = process.env.NEXT_PUBLIC_SERVER_URL;\n\n  if (!url && process.env.VERCEL_PROJECT_PRODUCTION_URL) {\n    return `https://${process.env.VERCEL_PROJECT_PRODUCTION_URL}`;\n  }\n\n  if (!url) {\n    url = \"http://localhost:3000\";\n  }\n\n  return url;\n};\n\nexport const getClientSideURL = () => {\n  if (canUseDOM) {\n    const protocol = window.location.protocol;\n    const domain = window.location.hostname;\n    const port = window.location.port;\n\n    return `${protocol}//${domain}${port ? `:${port}` : \"\"}`;\n  }\n\n  if (process.env.VERCEL_PROJECT_PRODUCTION_URL) {\n    return `https://${process.env.VERCEL_PROJECT_PRODUCTION_URL}`;\n  }\n\n  return process.env.NEXT_PUBLIC_SERVER_URL || \"\";\n};\n","\"use client\";\n\nimport React, { useCallback, useEffect } from \"react\";\nimport {\n  Button,\n  FieldLabel,\n  TextInput,\n  useField,\n  useForm,\n  useFormFields,\n} from \"@payloadcms/ui\";\nimport { TextFieldClientProps } from \"payload\";\n\nimport \"./slug.scss\";\nimport { formatSlug } from \"@/utils/string\";\n\ntype SlugComponentProps = {\n  fieldToUse: string;\n  checkboxFieldPath: string;\n} & TextFieldClientProps;\n\nexport const SlugComponent: React.FC<SlugComponentProps> = ({\n  field,\n  fieldToUse,\n  checkboxFieldPath: checkboxFieldPathFromProps,\n  path,\n  readOnly: readOnlyFromProps,\n}) => {\n  const { label } = field;\n\n  const checkboxFieldPath = path?.includes(\".\")\n    ? `${path}.${checkboxFieldPathFromProps}`\n    : checkboxFieldPathFromProps;\n\n  const { value, setValue } = useField<string>({ path: path || field.name });\n\n  const { dispatchFields } = useForm();\n\n  // The value of the checkbox\n  // We're using separate useFormFields to minimise re-renders\n  const checkboxValue = useFormFields(([fields]) => {\n    return fields[checkboxFieldPath]?.value as string;\n  });\n\n  // The value of the field we're listening to for the slug\n  const targetFieldValue = useFormFields(([fields]) => {\n    return fields[fieldToUse]?.value as string;\n  });\n\n  useEffect(() => {\n    if (checkboxValue) {\n      if (targetFieldValue) {\n        const formattedSlug = formatSlug(targetFieldValue);\n\n        if (value !== formattedSlug) setValue(formattedSlug);\n      } else {\n        if (value !== \"\") setValue(\"\");\n      }\n    }\n  }, [targetFieldValue, checkboxValue, setValue, value]);\n\n  const handleLock = useCallback(\n    (e: any) => {\n      e.preventDefault();\n\n      dispatchFields({\n        type: \"UPDATE\",\n        path: checkboxFieldPath,\n        value: !checkboxValue,\n      });\n    },\n    [checkboxValue, checkboxFieldPath, dispatchFields],\n  );\n\n  const readOnly = readOnlyFromProps || checkboxValue;\n\n  return (\n    <div className=\"field-type slug-field-component\">\n      <div className=\"label-wrapper\">\n        <FieldLabel htmlFor={`field-${path}`} label={label} />\n\n        <Button className=\"lock-button\" buttonStyle=\"none\" onClick={handleLock}>\n          {checkboxValue ? \"Unlock\" : \"Lock\"}\n        </Button>\n      </div>\n\n      <TextInput\n        value={value}\n        onChange={setValue}\n        path={path || field.name}\n        readOnly={Boolean(readOnly)}\n      />\n    </div>\n  );\n};\n","import slugify from \"slugify\";\n\nexport const capitalize = (str: string = \"\"): string => {\n  if (!str.length) {\n    return \"\";\n  }\n\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\nexport const formatSlug = (value: string = \"\") =>\n  slugify(value, {\n    lower: true,\n    trim: true,\n  });\n","\"use client\";\n\nimport { FieldLabel, TextInput, useField, useForm } from \"@payloadcms/ui\";\nimport { TextFieldClientProps } from \"payload\";\nimport { useState } from \"react\";\n\ntype UriFieldProps = {} & TextFieldClientProps;\n\nexport const UriComponent = ({ path, field }: UriFieldProps) => {\n  const { value, setValue } = useField<string>({ path: path || field.name });\n  const { label } = field;\n\n  const [copied, setCopied] = useState(false);\n\n  const handleCopyToClipboard = () => {\n    if (value) {\n      navigator.clipboard.writeText(value).then(() => {\n        setCopied(true);\n        setTimeout(() => setCopied(false), 2000); // Reset after 2 seconds\n      });\n    }\n  };\n\n  return (\n    <div className=\"field-type uri-field-component\">\n      {/* Label */}\n      <div className=\"label-wrapper\">\n        <FieldLabel htmlFor={`field-${path}`} label={label} />\n      </div>\n\n      {/* Text Input */}\n      <div\n        className=\"input-wrapper\"\n        style={{ display: \"flex\", alignItems: \"center\", gap: \"8px\" }}\n      >\n        <TextInput\n          value={value}\n          onChange={setValue}\n          path={path || field.name}\n          readOnly={true}\n          aria-readonly=\"true\"\n          style={{ flex: \"1\" }}\n        />\n        {/* Copy Button */}\n        <button\n          type=\"button\"\n          onClick={handleCopyToClipboard}\n          title=\"Copy to clipboard\"\n          className=\"copy-button\"\n          style={{\n            padding: \"8px\",\n            backgroundColor: \"#ddd\",\n            border: \"none\",\n            borderRadius: \"4px\",\n            cursor: \"pointer\",\n          }}\n        >\n          ðŸ“‹\n        </button>\n      </div>\n\n      {/* Copy Feedback */}\n      {copied && <small style={{ color: \"green\" }}>Copied to clipboard!</small>}\n    </div>\n  );\n};\n","// @ts-nocheck\n/**\n * Get nested property of an object\n * @param obj\n * @param path\n * @returns {*}\n */\nexport const getNestedProperty = (obj: any, path: string) => {\n  return path\n    .split(\".\")\n    .reduce(\n      (acc, key) => (acc && acc[key] !== undefined ? acc[key] : undefined),\n      obj,\n    );\n};\n\n/**\n * Simple object check.\n * @param item\n * @returns {boolean}\n */\nexport function isObject(item: unknown): boolean {\n  return item && typeof item === \"object\" && !Array.isArray(item);\n}\n\n/**\n * Deep merge two objects.\n * @param target\n * @param ...sources\n */\n\nexport function deepMerge<T, R>(target: T, source: R): T {\n  const output = { ...target };\n  if (isObject(target) && isObject(source)) {\n    Object.keys(source).forEach((key) => {\n      if (isObject(source[key])) {\n        if (!(key in target)) {\n          Object.assign(output, { [key]: source[key] });\n        } else {\n          output[key] = deepMerge(target[key], source[key]);\n        }\n      } else {\n        Object.assign(output, { [key]: source[key] });\n      }\n    });\n  }\n\n  return output;\n}\n","\"use client\";\n\nimport { getNestedProperty } from \"@/utils/object\";\nimport { useRowLabel } from \"@payloadcms/ui\";\n\ntype Props = {\n  fieldName: string;\n  prefix?: string;\n  fallback?: string;\n};\nexport const ArrayRowLabel = (props: Props) => {\n  const { label } = useArrayRowLabel(props);\n\n  return <div>{label}</div>;\n};\n\nconst useArrayRowLabel = (props: Props) => {\n  const { prefix, fieldName, fallback } = props;\n  const { data, rowNumber } = useRowLabel<{\n    [key: string]: any; // Allow indexing with a string key\n  }>();\n  const rowNr = `${(rowNumber || 0) + 1}`;\n\n  function getField(): any {\n    const prop = getNestedProperty(data, fieldName);\n\n    if (!prop) {\n      console.error(`Field ${fieldName} not found in data`, data);\n    }\n    return prop;\n  }\n\n  const getLabel = () => {\n    const field = getField();\n\n    return field || fallback || \"Item\";\n  };\n\n  const getFullLabel = () => {\n    const label = getLabel();\n    return `${prefix || \"\"} ${rowNr}: ${label}`;\n  };\n  return {\n    label: getFullLabel(),\n    rowNr: `${(rowNumber || 0) + 1}`,\n  };\n};\n"],"mappings":"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","names":["import_ui","slugify","import_jsx_runtime","import_ui","import_react","import_jsx_runtime","import_ui","import_jsx_runtime"]}