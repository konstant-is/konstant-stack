{"version":3,"sources":["../../src/payload/components.ts","../../src/payload/custom/slugField/component.tsx","../../src/utils/string.ts","../../src/payload/custom/uriField/component.tsx","../../src/payload/custom/rowLabel/index.ts"],"sourcesContent":["\"use client\";\n\nexport * from \"./custom/slugField/component\";\nexport * from \"./custom/uriField/component\";\nexport * from \"./custom/rowLabel\";\n","\"use client\";\n\nimport React, { useCallback, useEffect } from \"react\";\nimport {\n  Button,\n  FieldLabel,\n  TextInput,\n  useField,\n  useForm,\n  useFormFields,\n} from \"@payloadcms/ui\";\nimport { TextFieldClientProps } from \"payload\";\n\nimport \"./slug.scss\";\nimport { formatSlug } from \"@/utils/string\";\n\ntype SlugComponentProps = {\n  fieldToUse: string;\n  checkboxFieldPath: string;\n} & TextFieldClientProps;\n\nexport const SlugComponent: React.FC<SlugComponentProps> = ({\n  field,\n  fieldToUse,\n  checkboxFieldPath: checkboxFieldPathFromProps,\n  path,\n  readOnly: readOnlyFromProps,\n}) => {\n  const { label } = field;\n\n  const checkboxFieldPath = path?.includes(\".\")\n    ? `${path}.${checkboxFieldPathFromProps}`\n    : checkboxFieldPathFromProps;\n\n  const { value, setValue } = useField<string>({ path: path || field.name });\n\n  const { dispatchFields } = useForm();\n\n  // The value of the checkbox\n  // We're using separate useFormFields to minimise re-renders\n  const checkboxValue = useFormFields(([fields]) => {\n    return fields[checkboxFieldPath]?.value as string;\n  });\n\n  // The value of the field we're listening to for the slug\n  const targetFieldValue = useFormFields(([fields]) => {\n    return fields[fieldToUse]?.value as string;\n  });\n\n  useEffect(() => {\n    if (checkboxValue) {\n      if (targetFieldValue) {\n        const formattedSlug = formatSlug(targetFieldValue);\n\n        if (value !== formattedSlug) setValue(formattedSlug);\n      } else {\n        if (value !== \"\") setValue(\"\");\n      }\n    }\n  }, [targetFieldValue, checkboxValue, setValue, value]);\n\n  const handleLock = useCallback(\n    (e: any) => {\n      e.preventDefault();\n\n      dispatchFields({\n        type: \"UPDATE\",\n        path: checkboxFieldPath,\n        value: !checkboxValue,\n      });\n    },\n    [checkboxValue, checkboxFieldPath, dispatchFields],\n  );\n\n  const readOnly = readOnlyFromProps || checkboxValue;\n\n  return (\n    <div className=\"field-type slug-field-component\">\n      <div className=\"label-wrapper\">\n        <FieldLabel htmlFor={`field-${path}`} label={label} />\n\n        <Button className=\"lock-button\" buttonStyle=\"none\" onClick={handleLock}>\n          {checkboxValue ? \"Unlock\" : \"Lock\"}\n        </Button>\n      </div>\n\n      <TextInput\n        value={value}\n        onChange={setValue}\n        path={path || field.name}\n        readOnly={Boolean(readOnly)}\n      />\n    </div>\n  );\n};\n","import slugify from \"slugify\";\n\nexport const capitalize = (str: string = \"\"): string => {\n  if (!str.length) {\n    return \"\";\n  }\n\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\nexport const formatSlug = (value: string = \"\") =>\n  slugify(value, {\n    lower: true,\n    trim: true,\n  });\n","\"use client\";\n\nimport { FieldLabel, TextInput, useField, useForm } from \"@payloadcms/ui\";\nimport { TextFieldClientProps } from \"payload\";\n\ntype UriFieldProps = {} & TextFieldClientProps;\nexport const UriComponent = ({ path, field }: UriFieldProps) => {\n  const { value, setValue } = useField<string>({ path: path || field.name });\n  const { label } = field;\n\n  return (\n    <div className=\"field-type uri-field-component\">\n      <div className=\"label-wrapper\">\n        <FieldLabel htmlFor={`field-${path}`} label={label} />\n      </div>\n\n      <TextInput\n        value={value}\n        onChange={setValue}\n        path={path || field.name}\n        readOnly={true}\n      />\n    </div>\n  );\n};\n","export const arrayRowLabelField = (props: {\n  prefix: string;\n  fieldName: string;\n}) => {\n  return {\n    path: \"@/payload/components#ArrayRowLabel\",\n    clientProps: props,\n  };\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACEA,mBAA8C;AAC9C,gBAOO;;;ACVP,qBAAoB;AAUb,IAAM,aAAa,CAAC,QAAgB,WACzC,eAAAA,SAAQ,OAAO;AAAA,EACb,OAAO;AAAA,EACP,MAAM;AACR,CAAC;;;ADgEG;AAzDC,IAAM,gBAA8C,CAAC;AAAA,EAC1D;AAAA,EACA;AAAA,EACA,mBAAmB;AAAA,EACnB;AAAA,EACA,UAAU;AACZ,MAAM;AACJ,QAAM,EAAE,MAAM,IAAI;AAElB,QAAM,oBAAoB,MAAM,SAAS,GAAG,IACxC,GAAG,IAAI,IAAI,0BAA0B,KACrC;AAEJ,QAAM,EAAE,OAAO,SAAS,QAAI,oBAAiB,EAAE,MAAM,QAAQ,MAAM,KAAK,CAAC;AAEzE,QAAM,EAAE,eAAe,QAAI,mBAAQ;AAInC,QAAM,oBAAgB,yBAAc,CAAC,CAAC,MAAM,MAAM;AAChD,WAAO,OAAO,iBAAiB,GAAG;AAAA,EACpC,CAAC;AAGD,QAAM,uBAAmB,yBAAc,CAAC,CAAC,MAAM,MAAM;AACnD,WAAO,OAAO,UAAU,GAAG;AAAA,EAC7B,CAAC;AAED,8BAAU,MAAM;AACd,QAAI,eAAe;AACjB,UAAI,kBAAkB;AACpB,cAAM,gBAAgB,WAAW,gBAAgB;AAEjD,YAAI,UAAU,cAAe,UAAS,aAAa;AAAA,MACrD,OAAO;AACL,YAAI,UAAU,GAAI,UAAS,EAAE;AAAA,MAC/B;AAAA,IACF;AAAA,EACF,GAAG,CAAC,kBAAkB,eAAe,UAAU,KAAK,CAAC;AAErD,QAAM,iBAAa;AAAA,IACjB,CAAC,MAAW;AACV,QAAE,eAAe;AAEjB,qBAAe;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO,CAAC;AAAA,MACV,CAAC;AAAA,IACH;AAAA,IACA,CAAC,eAAe,mBAAmB,cAAc;AAAA,EACnD;AAEA,QAAM,WAAW,qBAAqB;AAEtC,SACE,6CAAC,SAAI,WAAU,mCACb;AAAA,iDAAC,SAAI,WAAU,iBACb;AAAA,kDAAC,wBAAW,SAAS,SAAS,IAAI,IAAI,OAAc;AAAA,MAEpD,4CAAC,oBAAO,WAAU,eAAc,aAAY,QAAO,SAAS,YACzD,0BAAgB,WAAW,QAC9B;AAAA,OACF;AAAA,IAEA;AAAA,MAAC;AAAA;AAAA,QACC;AAAA,QACA,UAAU;AAAA,QACV,MAAM,QAAQ,MAAM;AAAA,QACpB,UAAU,QAAQ,QAAQ;AAAA;AAAA,IAC5B;AAAA,KACF;AAEJ;;;AE5FA,IAAAC,aAAyD;AASrD,IAAAC,sBAAA;AALG,IAAM,eAAe,CAAC,EAAE,MAAM,MAAM,MAAqB;AAC9D,QAAM,EAAE,OAAO,SAAS,QAAI,qBAAiB,EAAE,MAAM,QAAQ,MAAM,KAAK,CAAC;AACzE,QAAM,EAAE,MAAM,IAAI;AAElB,SACE,8CAAC,SAAI,WAAU,kCACb;AAAA,iDAAC,SAAI,WAAU,iBACb,uDAAC,yBAAW,SAAS,SAAS,IAAI,IAAI,OAAc,GACtD;AAAA,IAEA;AAAA,MAAC;AAAA;AAAA,QACC;AAAA,QACA,UAAU;AAAA,QACV,MAAM,QAAQ,MAAM;AAAA,QACpB,UAAU;AAAA;AAAA,IACZ;AAAA,KACF;AAEJ;;;ACxBO,IAAM,qBAAqB,CAAC,UAG7B;AACJ,SAAO;AAAA,IACL,MAAM;AAAA,IACN,aAAa;AAAA,EACf;AACF;","names":["slugify","import_ui","import_jsx_runtime"]}