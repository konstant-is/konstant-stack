{"version":3,"sources":["../../src/plugin-localized-navigation/fields/permalink/permalinkComponent.tsx","../../src/plugin-localized-navigation/fields/slug/slugComponent.tsx"],"sourcesContent":["\"use client\";\n\nimport { useMemo } from \"react\";\n\nimport { useDocumentInfo, useFormFields } from \"@payloadcms/ui\";\nimport { UIFieldClientProps } from \"payload\";\nimport { getClientSideURL } from \"@/utils/getUrl\";\n\ntype Props = UIFieldClientProps & {\n  custom: {\n    sourceField: string;\n  };\n};\nexport const PermalinkComponent = (props: Props) => {\n  const { custom } = props;\n  const serverURL = getClientSideURL();\n  const { id } = useDocumentInfo();\n\n  // Listen to the field value\n  const targetFieldValue = useFormFields(([fields]) => {\n    return fields[custom.sourceField]?.value as string;\n  });\n\n  // Compute permalink only when necessary\n  const processedValue = useMemo(() => {\n    if (!targetFieldValue) return \"\";\n    return `${serverURL}${targetFieldValue}`;\n  }, [serverURL, targetFieldValue]);\n\n  if (!id || !processedValue) {\n    return null;\n  }\n\n  return (\n    <div className=\"field-type permalinksField\">\n      <strong>Permalink:</strong>{\" \"}\n      <a href={processedValue} target=\"_blank\" rel=\"noopener noreferrer\">\n        {processedValue}\n      </a>\n    </div>\n  );\n};\n","\"use client\";\n\nimport React, { useCallback, useMemo } from \"react\";\n\nimport \"./slug.scss\";\n\nimport {\n  Button,\n  FieldLabel,\n  TextInput,\n  useField,\n  useForm,\n  useFormFields,\n} from \"@payloadcms/ui\";\nimport { TextFieldClientProps } from \"payload\";\nimport slugify from \"slugify\";\n\nimport { SlugifyOptions } from \"../../types\";\n\ntype SlugComponentProps = TextFieldClientProps & {\n  custom: {\n    watchFields: string[];\n    checkboxFieldPath: string;\n    slugifyOptions: SlugifyOptions;\n  };\n};\n\nexport const SlugComponent: React.FC<SlugComponentProps> = ({\n  field,\n  custom,\n  path,\n  readOnly: readOnlyFromProps,\n}) => {\n  const { label } = field;\n  const {\n    watchFields,\n    slugifyOptions,\n    checkboxFieldPath: checkboxFieldPathFromProps,\n  } = custom;\n\n  const checkboxFieldPath = path?.includes(\".\")\n    ? `${path}.${checkboxFieldPathFromProps}`\n    : checkboxFieldPathFromProps;\n\n  const { value, setValue } = useField<string>({ path: path || field.name });\n\n  const { dispatchFields } = useForm();\n\n  // The value of the checkbox\n  // We're using separate useFormFields to minimise re-renders\n  const checkboxValue = useFormFields(([fields]) => {\n    return fields[checkboxFieldPath]?.value as string;\n  });\n\n  const fields = useFormFields(([fields, dispatch]) => {\n    return watchFields.map((watch) => fields[watch]);\n  });\n\n  const processedValue = useMemo(() => {\n    const separator = slugifyOptions?.replacement ?? \"-\";\n\n    return fields\n      .filter((item) => Boolean(item?.value))\n      .reduce((accumulator, currentValue, currentIndex) => {\n        return (\n          String(accumulator) +\n          (currentIndex > 0 ? separator : \"\") +\n          slugify(String(currentValue?.value), slugifyOptions)\n        );\n      }, \"\");\n  }, [fields]);\n\n  //   useEffect(() => {\n  //     if (checkboxValue) {\n  //       if (targetFieldValue) {\n  //         const formattedSlug = formatSlug(targetFieldValue);\n\n  //         if (value !== formattedSlug) setValue(formattedSlug);\n  //       } else {\n  //         if (value !== \"\") setValue(\"\");\n  //       }\n  //     }\n  //   }, [targetFieldValue, checkboxValue, setValue, value]);\n\n  React.useEffect(() => {\n    if (processedValue !== value) {\n      setValue(processedValue);\n    }\n  }, [processedValue]);\n\n  const handleLock = useCallback(\n    (e: React.MouseEvent) => {\n      e.preventDefault();\n\n      dispatchFields({\n        type: \"UPDATE\",\n        path: checkboxFieldPath,\n        value: !checkboxValue,\n      });\n    },\n    [checkboxValue, checkboxFieldPath, dispatchFields],\n  );\n\n  const readOnly = readOnlyFromProps || checkboxValue;\n\n  return (\n    <div className=\"field-type slug-field-component\">\n      <div className=\"label-wrapper\">\n        <FieldLabel htmlFor={`field-${path}`} label={label} />\n\n        <Button className=\"lock-button\" buttonStyle=\"none\" onClick={handleLock}>\n          {checkboxValue ? \"Unlock\" : \"Lock\"}\n        </Button>\n      </div>\n\n      <TextInput\n        value={value}\n        onChange={setValue}\n        path={path || field.name}\n        readOnly={Boolean(readOnly)}\n      />\n    </div>\n  );\n};\n"],"mappings":"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","names":["useMemo","useFormFields","jsx","jsxs","fields","useMemo"]}