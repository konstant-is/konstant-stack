{"version":3,"sources":["../../src/plugin-localized-navigation/plugin.ts","../../src/plugin-localized-navigation/fields/localizedSlugField.ts","../../src/plugin-localized-navigation/fields/localizedUrlField.ts","../../src/plugin-localized-navigation/config.ts","../../src/plugin-localized-navigation/fields/permalink/permalinkField.ts","../../src/plugin-localized-navigation/hooks/validateSlug.ts","../../src/plugin-localized-navigation/utils/logger.ts","../../src/plugin-localized-navigation/fields/slug/slugField.ts","../../src/plugin-localized-navigation/fields/urlField.ts","../../src/plugin-localized-navigation/hooks/resolveLocalizedUrls.ts","../../src/plugin-localized-navigation/hooks/resolveUrl.ts","../../src/plugin-localized-navigation/hooks/resolveLocalizedSlugs.ts","../../src/plugin-localized-navigation/utils/utils.ts","../../src/plugin-localized-navigation/utils/createConfigs.ts","../../src/plugin-localized-navigation/utils/enhanceFields.ts"],"sourcesContent":["import { nestedDocsPlugin } from \"@payloadcms/plugin-nested-docs\";\nimport type { CollectionSlug, Config, Plugin } from \"payload\";\n\nimport { createPermalinkField } from \"./fields\";\nimport {\n  resolveUrl,\n  resolveLocalizedUrl,\n  resolveLocalizedSlugs,\n} from \"./hooks\";\n\nimport { LocalizedNavigationPluginOptions } from \"./types\";\nimport { enhanceFields } from \"./utils/enhanceFields\";\nimport { getLocales, mergeHooks } from \"./utils/utils\";\n\nexport const localizedNavigationPlugin =\n  (pluginConfig: LocalizedNavigationPluginOptions): Plugin =>\n  async (config) => {\n    const locales = getLocales(config);\n\n    let enhancedConfig = config;\n\n    if (pluginConfig.nestedDocsPlugin) {\n      // Integrate nestedDocsPlugin and await its result\n      enhancedConfig = await nestedDocsPlugin({\n        collections: pluginConfig.collections,\n        ...pluginConfig.nestedDocsPlugin,\n      })(enhancedConfig);\n    }\n\n    return createPlugin({ pluginConfig, config: enhancedConfig, locales });\n  };\n\nconst createPlugin = ({\n  pluginConfig,\n  config,\n  locales,\n}: {\n  pluginConfig: LocalizedNavigationPluginOptions;\n  config: Config;\n  locales: string[];\n}) => ({\n  ...config,\n  collections: (config.collections || []).map((collection) => {\n    if (!pluginConfig.collections.includes(collection.slug as CollectionSlug)) {\n      return collection; // Skip collections not included in the plugin config\n    }\n\n    // Enhance fields and configurations\n    const { fields, configs } = enhanceFields({\n      fields: collection.fields,\n      config: pluginConfig,\n      locales,\n    });\n\n    // Optionally add the permalink field\n    const permalinkField =\n      pluginConfig.usePermalink &&\n      createPermalinkField({\n        fieldName: \"permalink\",\n        sourceField: configs.urlFieldConfig.fieldName,\n      });\n\n    return {\n      ...collection,\n      fields: permalinkField ? [permalinkField, ...fields] : [...fields],\n      hooks: {\n        ...(collection.hooks || {}),\n        beforeChange: mergeHooks(\n          [\n            resolveUrl(configs.urlFieldConfig),\n            resolveLocalizedUrl(configs.localizedUrlFieldConfig),\n            resolveLocalizedSlugs(configs.localizedSlugFieldConfig),\n          ],\n          collection.hooks?.beforeChange,\n        ),\n      },\n    };\n  }),\n});\n","import { Field } from \"payload\";\n\nimport { LocalizedSlugFieldConfig } from \"../types\";\n\nexport const createLocalizedSlugsField = (\n  config: LocalizedSlugFieldConfig\n): Field => ({\n  name: config.fieldName,\n  type: \"group\",\n  localized: false,\n  admin: {\n    readOnly: true,\n    description: \"Automatically generated localized slugs.\",\n  },\n  fields: config.locales.map((locale) => ({\n    name: locale,\n    type: \"text\",\n    defaultValue: \"undefined\",\n    required: true,\n    localized: false,\n  })),\n});\n","import { Field } from \"payload\";\n\nimport { LocalizedUrlFieldConfig } from \"../types\";\n\nexport const createLocalizedUrlField = (\n  config: LocalizedUrlFieldConfig\n): Field => {\n  return {\n    name: config.fieldName,\n    type: \"group\",\n    localized: false,\n    admin: {\n      readOnly: true,\n      description: \"Automatically generated localized urls.\",\n    },\n    fields: config.locales.map((locale) => ({\n      name: locale,\n      type: \"text\",\n      defaultValue: \"undefined\",\n      required: true,\n      localized: false,\n    })),\n  };\n};\n","export type PluginConfig = {\n  basePath: string;\n  paths: {\n    client: string;\n    fields: string;\n  };\n  settings: {\n    defaultLocale: string;\n    enableLogging: boolean;\n  };\n  getPath: (type: keyof PluginConfig[\"paths\"], subPath?: string) => string;\n};\n\nconst pluginPath = \"@konstant/stack/plugin-localized-navigation\";\nexport const pluginConfig: PluginConfig = {\n  basePath: pluginPath, // Base path for the plugin\n  paths: {\n    client: `${pluginPath}/client`,\n    fields: `${pluginPath}/fields`,\n  },\n  settings: {\n    defaultLocale: \"en\", // Default locale for the plugin\n    enableLogging: true, // Toggle logging for debugging\n  },\n  // Helper function to generate a path dynamically\n  getPath: (type: keyof typeof pluginConfig.paths, subPath = \"\"): string => {\n    const base = pluginConfig.paths[type];\n    if (!base) {\n      throw new Error(`Invalid path type: ${type}`);\n    }\n    return `${base}${subPath}`;\n  },\n};\n","import { Field } from \"payload\";\n\nimport { pluginConfig } from \"../../config\";\nimport { PermalinkFieldConfig } from \"../../types\";\n\nexport const createPermalinkField = (config: PermalinkFieldConfig): Field => {\n  return {\n    name: config.fieldName,\n    type: \"ui\",\n    admin: {\n      components: {\n        Field: {\n          path: pluginConfig.getPath(\"client\", \"#PermalinkComponent\"),\n\n          clientProps: {\n            custom: {\n              sourceField: config.sourceField,\n            },\n          },\n        },\n      },\n    },\n  };\n};\n","import { FieldHook } from \"payload\";\nimport slugify from \"slugify\"; // Ensure you have this installed and configured\n\nimport { SlugFieldConfig } from \"../types\";\nimport { logger } from \"../utils/logger\";\n\nexport const validateSlug =\n  (config: SlugFieldConfig): FieldHook =>\n  ({ siblingData, value, originalDoc, data, req }) => {\n    const log = logger(false);\n\n    log.section(\"validateSlug\");\n    log.info(\"lockName:\", config.lockFieldName);\n\n    const slugLock = siblingData[config.lockFieldName];\n    log.info(\"lockSlug:\", slugLock);\n\n    // If the slug is locked, return the existing value\n    if (!slugLock) {\n      return value;\n    }\n\n    let missingFields: string[] = [];\n\n    // Collect values of the fields used for slug generation\n    const fields = config.useFields.map((field) => {\n      const fieldValue = data?.[field] || null;\n\n      if (!fieldValue) {\n        missingFields.push(field); // Track missing fields\n      }\n\n      return fieldValue;\n    });\n\n    // If any required fields are missing, log and return the original value\n    if (missingFields.length > 0) {\n      console.warn(\"Missing fields for slug generation:\", missingFields);\n      return value;\n    }\n\n    const separator = config.slugify.replacement ?? \"-\";\n\n    // Generate the slug using slugify\n    const processedSlug = fields\n      .filter((item) => Boolean(item)) // Remove null/undefined values\n      .map((fieldValue) => slugify(String(fieldValue), config.slugify)) // Slugify each field\n      .join(separator); // Join the slugified parts\n\n    log.info(\"Generated slug:\", processedSlug);\n\n    return processedSlug;\n  };\n","export const logger = (shouldLog = true) => {\n  let indent = 0;\n  const init = () => {\n    setIndent(0);\n  };\n  const section = (title: string) => {\n    if (!shouldLog) return;\n    console.log(\"\");\n    console.log(title);\n    console.log(\"----------------------------------\");\n\n    indent = 4; // Indent future logs within this section\n  };\n\n  const info = (...messages: any[]) => {\n    if (!shouldLog) return;\n    console.log(`${\" \".repeat(indent)}`, ...messages);\n  };\n\n  const setIndent = (newIndent: number) => {\n    indent = newIndent;\n  };\n\n  return {\n    init,\n    section,\n    info,\n    setIndent,\n  };\n};\n","import { CheckboxField, Field, TextField } from \"payload\";\n\nimport { pluginConfig } from \"../../config\";\nimport { validateSlug } from \"../../hooks/validateSlug\";\nimport { SlugFieldConfig, SlugifyOptions } from \"../../types\";\n\ntype Props = {\n  config: SlugFieldConfig;\n  slugOverrides?: Partial<TextField>;\n  checkboxOverrides?: Partial<CheckboxField>;\n};\n\nexport const createSlugField = (props: Props): Field[] => {\n  const { config, slugOverrides = {}, checkboxOverrides = {} } = props || {};\n  const { useFields = [\"title\"] } = config;\n  const checkBoxField: CheckboxField = {\n    name: \"slugLock\",\n    defaultValue: true,\n    ...checkboxOverrides,\n    admin: {\n      hidden: true,\n      position: \"sidebar\",\n      ...checkboxOverrides.admin,\n    },\n    type: \"checkbox\",\n  };\n\n  const slugField: TextField = {\n    name: \"slug\",\n    type: \"text\",\n    required: true,\n    localized: true,\n    index: true,\n    unique: true,\n    hooks: {\n      beforeValidate: [validateSlug(config)],\n    },\n    admin: {\n      position: \"sidebar\",\n      components: {\n        Field: {\n          path: pluginConfig.getPath(\"client\", \"#SlugComponent\"),\n\n          clientProps: {\n            custom: {\n              watchFields: useFields,\n              checkboxFieldPath: checkBoxField.name,\n            },\n          },\n        },\n      },\n    },\n  };\n\n  return [slugField, checkBoxField];\n};\n","import { Field } from \"payload\";\n\nimport { UrlFieldConfig } from \"../types\";\n\nexport const createUrlField = (config: UrlFieldConfig): Field => {\n  return {\n    type: \"text\",\n    defaultValue: \"\",\n    index: false, // Not indexed by default\n    localized: true, // Supports localization\n    name: config.fieldName,\n    admin: {\n      position: \"sidebar\",\n      readOnly: true,\n    },\n  };\n};\n","import { CollectionBeforeChangeHook } from \"payload\";\n\nimport { LocalizedUrlFieldConfig } from \"../types\";\n\nexport const resolveLocalizedUrl =\n  (config: LocalizedUrlFieldConfig): CollectionBeforeChangeHook =>\n  ({ data, operation, req }) => {\n    const { payload, locale } = req;\n    const { defaultLocale } = payload.config.localization || {};\n    const currentLocale = locale || defaultLocale || \"en\";\n\n    if (operation === \"create\") {\n      return data;\n    }\n\n    const sourceField = data[config.sourceField];\n    if (!sourceField) {\n      payload.logger.error(\n        `Error: Missing source field \"${config.sourceField}\" while resolving localized url.`\n      );\n\n      return data;\n    }\n\n    const field = data[config.fieldName] || {};\n    if (typeof field !== \"object\") {\n      payload.logger.error(\n        `Error: Localized url field \"${config.fieldName}\" is not an object.`\n      );\n      return data;\n    }\n\n    const updated = {\n      ...field,\n      [currentLocale]: sourceField,\n    };\n\n    return {\n      ...data,\n      [config.fieldName]: updated,\n    };\n  };\n","import { CollectionBeforeChangeHook } from \"payload\";\n\nimport { UrlFieldConfig } from \"../types\";\nimport { logger } from \"../utils/logger\";\n\nexport const resolveUrl =\n  (config: UrlFieldConfig): CollectionBeforeChangeHook =>\n  ({ data }) => {\n    const log = logger(false);\n    log.section(\"resolveUrl\");\n\n    // Generate URL if generateUrl function is provided\n    let generatedUrl = \"\";\n    if (typeof config.generateUrl === \"function\") {\n      generatedUrl = config.generateUrl(data);\n    }\n\n    // Handle nested docs if useNestedDocs is enabled\n    let nestedUrl = \"\";\n    if (config.useNestedDocs) {\n      log.info(data.breadcrumbs);\n      const breadcrumbs = Array.isArray(data.breadcrumbs)\n        ? data.breadcrumbs\n        : [];\n      nestedUrl = breadcrumbs.reverse()[0]?.url || \"\";\n    }\n\n    log.info(\"generatedUrl:\", generatedUrl), log.info(\"nestedUrl:\", nestedUrl);\n    return {\n      ...data,\n      [config.fieldName]: config.useNestedDocs ? nestedUrl : generatedUrl,\n    };\n  };\n","import { CollectionBeforeChangeHook } from \"payload\";\n\nimport { LocalizedSlugFieldConfig } from \"../types\";\n\nexport const resolveLocalizedSlugs =\n  (config: LocalizedSlugFieldConfig): CollectionBeforeChangeHook =>\n  async ({ data, req, operation }) => {\n    const { payload, locale } = req;\n    const { defaultLocale } = payload.config.localization || {};\n    const currentLocale = locale || defaultLocale || \"en\";\n\n    if (operation === \"create\") {\n      return data;\n    }\n\n    // Fetch source field value\n    const sourceField = data[config.sourceField];\n    if (!sourceField) {\n      payload.logger.error(\n        `Error: Missing source field \"${config.sourceField}\" while populating localized slugs.`,\n      );\n\n      return data;\n    }\n\n    // Fetch or initialize the localized slugs field\n    const localizedSlugField = data[config.fieldName] || {};\n    if (typeof localizedSlugField !== \"object\") {\n      payload.logger.error(\n        `Error: Localized slugs field \"${config.fieldName}\" is not an object.`,\n      );\n      return data;\n    }\n\n    // Update the localized field with the current locale's slug\n    const updatedLocalizedField = {\n      ...localizedSlugField,\n      [currentLocale]: sourceField,\n    };\n\n    // Log successful operation\n    payload.logger.info(\n      `Localized slug updated for locale \"${currentLocale}\" in field \"${config.fieldName}\".`,\n    );\n\n    return {\n      ...data,\n      [config.fieldName]: updatedLocalizedField,\n    };\n  };\n","import { Config } from \"payload\";\nimport { LocalizedNavigationPluginOptions } from \"../types\";\n\nexport const useNestedDocs = (pluginConfig: LocalizedNavigationPluginOptions) =>\n  typeof pluginConfig.nestedDocsPlugin === \"object\";\n\nexport const getLocales = (config: Config): string[] => {\n  const { locales } = config.localization || {};\n  if (!locales || locales.length === 0) {\n    throw new Error(\n      \"Localization is required but not enabled. Please configure 'localization.locales' in Payload CMS.\",\n    );\n  }\n  return locales.map((locale) => String(locale));\n};\n\n// Helper to merge hooks safely\nexport const mergeHooks = <T>(newHooks: T[], existingHooks?: T[]): T[] => {\n  return [...(existingHooks || []), ...newHooks];\n};\n","import {\n  LocalizedNavigationPluginOptions,\n  LocalizedSlugFieldConfig,\n  LocalizedUrlFieldConfig,\n  SlugFieldConfig,\n  UrlFieldConfig,\n} from \"../types\";\nimport { useNestedDocs } from \"./utils\";\n\nconst createSlugFieldConfig = (\n  config: Partial<SlugFieldConfig>,\n  defaults: { fieldName: string; lockFieldName: string; locales: string[] },\n): SlugFieldConfig => ({\n  fieldName: config.fieldName || defaults.fieldName,\n  lockFieldName: config.lockFieldName || defaults.lockFieldName,\n  useFields: config.useFields || [\"title\"],\n  slugify: {\n    replacement: \"-\",\n    remove: /[*+~.()'\"!:@]/g,\n    lower: true,\n    strict: false,\n    locale: \"en\",\n    trim: true,\n    ...(config.slugify || {}),\n  },\n});\n\nconst createLocalizedSlugFieldConfig = (\n  config: Partial<LocalizedSlugFieldConfig>,\n  defaults: { fieldName: string; sourceFieldName: string; locales: string[] },\n): LocalizedSlugFieldConfig => ({\n  fieldName: config.fieldName || defaults.fieldName,\n  sourceField: config.sourceField || defaults.sourceFieldName,\n  locales: config.locales || defaults.locales,\n});\n\nconst createUrlFieldConfig = (\n  config: Partial<UrlFieldConfig>,\n  defaults: UrlFieldConfig,\n): UrlFieldConfig => ({\n  fieldName: config.fieldName || defaults.fieldName,\n  useNestedDocs: config.useNestedDocs ?? defaults.useNestedDocs,\n  generateUrl: config.generateUrl,\n});\n\nconst createLocalizedUrlFieldConfig = (\n  config: Partial<LocalizedUrlFieldConfig>,\n  defaults: LocalizedUrlFieldConfig,\n): LocalizedUrlFieldConfig => ({\n  ...defaults,\n  ...(config || {}),\n});\n\nexport const createConfigs = (\n  pluginConfig: LocalizedNavigationPluginOptions,\n  locales: string[],\n) => {\n  const {\n    slugField = {},\n    localizedSlugField = {},\n    urlField = {},\n    localizedUrlField = {},\n  } = pluginConfig;\n\n  const slugFieldConfig = createSlugFieldConfig(slugField, {\n    fieldName: \"slug\",\n    lockFieldName: \"slugLock\",\n    locales,\n  });\n\n  const localizedSlugFieldConfig = createLocalizedSlugFieldConfig(\n    localizedSlugField,\n    {\n      fieldName: \"slugs\",\n      sourceFieldName: slugFieldConfig.fieldName,\n      locales,\n    },\n  );\n\n  const urlFieldConfig = createUrlFieldConfig(urlField, {\n    fieldName: \"url\",\n    useNestedDocs: useNestedDocs(pluginConfig),\n  });\n\n  const localizedUrlFieldConfig = createLocalizedUrlFieldConfig(\n    localizedUrlField,\n    {\n      fieldName: \"urls\",\n      sourceField: urlFieldConfig.fieldName,\n      locales,\n    },\n  );\n\n  return {\n    slugFieldConfig,\n    urlFieldConfig,\n    localizedSlugFieldConfig,\n    localizedUrlFieldConfig,\n  };\n};\n","import { Field } from \"payload\";\n\nimport {\n  createLocalizedSlugsField,\n  createLocalizedUrlField,\n  createSlugField,\n  createUrlField,\n} from \"../fields\";\nimport { LocalizedNavigationPluginOptions } from \"../types\";\nimport { createConfigs } from \"./createConfigs\";\nimport { logger } from \"./logger\";\n\nexport const enhanceFields = ({\n  config,\n  fields,\n  locales,\n}: {\n  config: LocalizedNavigationPluginOptions;\n  fields: Field[];\n  locales: string[];\n}) => {\n  const log = logger(false);\n  log.section(\"enhanceFields\");\n\n  let updatedFields = [...fields]; // Start with a copy of the existing fields\n\n  // Create index for fast lookups\n  const indexedFields = fields.reduce(\n    (index, field) => {\n      if (\"name\" in field && typeof field.name === \"string\") {\n        index[field.name] = field;\n      }\n      return index;\n    },\n    {} as Record<string, Field>,\n  );\n\n  const addFields = (newFields: Field[]) => {\n    newFields.forEach((field) => {\n      if (\"name\" in field && typeof field.name === \"string\") {\n        if (!indexedFields[field.name]) {\n          updatedFields.push(field);\n          indexedFields[field.name] = field;\n          log.info(`Field added: ${field.name}`);\n        } else {\n          log.info(`Field already exists: ${field.name}`);\n        }\n      } else {\n        console.warn(\"Field without a name encountered. Skipping:\", field);\n      }\n    });\n  };\n\n  // Generate configurations\n  const {\n    slugFieldConfig,\n    urlFieldConfig,\n    localizedSlugFieldConfig,\n    localizedUrlFieldConfig,\n  } = createConfigs(config, locales);\n\n  // Add slug fields\n  if (!indexedFields[slugFieldConfig.fieldName]) {\n    const slugFields = createSlugField({ config: slugFieldConfig });\n    log.info(`Adding slug fields for: ${slugFieldConfig.fieldName}`);\n    addFields(slugFields); // Handles multiple slug-related fields\n  }\n\n  // Add localized slug fields\n  if (!indexedFields[localizedSlugFieldConfig.fieldName]) {\n    const localizedField = createLocalizedSlugsField(localizedSlugFieldConfig);\n    log.info(\n      `Adding localized slug field: ${localizedSlugFieldConfig.fieldName}`,\n    );\n    addFields([localizedField]);\n  }\n\n  // Add URL fields\n  if (!indexedFields[urlFieldConfig.fieldName]) {\n    const field = createUrlField(urlFieldConfig);\n    log.info(`Adding URL field: ${urlFieldConfig.fieldName}`);\n    addFields([field]);\n  }\n\n  // Add Localized URL field\n  if (!indexedFields[localizedUrlFieldConfig.fieldName]) {\n    const field = createLocalizedUrlField(localizedUrlFieldConfig);\n    log.info(\n      `Adding Localized URL field: ${localizedUrlFieldConfig.fieldName}`,\n    );\n    addFields([field]);\n  }\n\n  return {\n    fields: updatedFields,\n    configs: {\n      slugFieldConfig,\n      localizedSlugFieldConfig,\n      urlFieldConfig,\n      localizedUrlFieldConfig,\n    },\n  };\n};\n"],"mappings":"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","names":["slugify","pluginConfig","pluginConfig","pluginConfig"]}