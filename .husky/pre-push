#!/bin/bash
set -e
trap 'echo "$(date +"%Y-%m-%d %H:%M:%S") - An error occurred. Exiting script."; exit 1' ERR

# Utility functions
log() {
  echo "$(date +"%Y-%m-%d %H:%M:%S") - $1"
}

get_last_commit_message() {
  git log -1 --pretty=%B
}

has_uncommitted_changes() {
  [[ -n "$(git status --porcelain)" ]]
}

is_chore_commit() {
  local last_commit_message=$(get_last_commit_message)
  [[ "$last_commit_message" == chore:* ]]
}

get_version() {
  node -p "require('./package.json').version"
}

push_tags_if_new_version() {
  NEW_VERSION=$(get_version) # Get the latest version after the bump
  if [[ "$CURRENT_VERSION" != "$NEW_VERSION" ]]; then
    log "Tagging new version: v$NEW_VERSION..."
    git tag -a "v$NEW_VERSION" -m "Release version $NEW_VERSION"
    git push --tags
    log "Tags pushed successfully."
  else
    log "No new version detected. Skipping tag push."
  fi
}

run_chores() {
  log "Running chores..."

  log "Building dist folder..."
  pnpm build
  log "Build completed."

  log "Bumping version..."
  pnpm run ci:version-patch
  log "Version bumped successfully."

  log "Staging and pushing changes..."
  git add package.json dist
  git commit -m "chore: update dist [auto-generated]"
  git push

  push_tags_if_new_version
  log "Chores completed."
}

# Main execution
CURRENT_VERSION=$(get_version) # Set the initial version
log "Starting pre-push hook... Current version: $CURRENT_VERSION"

if is_chore_commit; then
  log "Detected chore commit. Skipping hook."
  exit 0
fi

run_chores

log "Pre-push hook completed successfully."